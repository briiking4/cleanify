{"ast":null,"code":"import React from'react';import'./CleanPlaylist.css';import SpotifyWebApi from'spotify-web-api-js';const spotifyApi=new SpotifyWebApi();class CleanPlaylist extends React.Component{constructor(props){super(props);this.state={userId:this.props.user,playlistName:this.props.name,playlistId:this.props.data,ownerId:'',buttonPressed:false,loadingData:false,newPlaylistId:'',revealUnable:false};this.explicitTracks=[];this.cleanTracks=[];this.noCleanVersions=[];this.recTracks=[];this.timesClicked=1;this.unaddCounter=1;this.openPlaylist=\"\";this.makeCleanPlaylist=this.makeCleanPlaylist.bind(this);this.findCleanTrack=this.findCleanTrack.bind(this);this.getRecommended=this.getRecommended.bind(this);this.unableToAdd=this.unableToAdd.bind(this);this.addTrack=this.addTrack.bind(this);this.cleanTrackCache=JSON.parse(localStorage.getItem('cleanTrackCache'))||{};}getTracksData(owner,id){var explicitTracksList=[];var cleanTracksList=[];spotifyApi.getPlaylistTracks(owner,id).then(response=>{response.items.map(item=>{if(item.track.explicit===true){explicitTracksList.push(item.track);}else{cleanTracksList.push(item.track);}});});this.explicitTracks=explicitTracksList;this.cleanTracks=cleanTracksList;}componentDidMount(){var playlistId=this.props.data;var ownerId=this.props.id;this.getTracksData(ownerId,playlistId);window.scrollTo(0,0);}async makeCleanPlaylist(){console.log(\"CACHE STATE\");console.log(this.cleanTrackCache);this.setState({loadingData:true});const cleanTrackPromises=this.explicitTracks.map(track=>this.findCleanTrack(track));console.log(cleanTrackPromises);const cleanTracks=await Promise.all(cleanTrackPromises);cleanTracks.forEach((cleanTrack,index)=>{if(cleanTrack){this.cleanTracks.push(cleanTrack);// Add clean track if found\n}else{this.noCleanVersions.push(this.explicitTracks[index]);// Track not found, add to noCleanVersions\n}});if(this.noCleanVersions.length>0){this.recTracks=await this.getRecommended(this.noCleanVersions);}const trackUris=this.cleanTracks.map(track=>track.uri);const playlistResult=await spotifyApi.createPlaylist(this.state.userId,{name:\"\".concat(this.state.playlistName,\" (Clean)\")});this.openPlaylist=playlistResult.external_urls.spotify;const newId=playlistResult.id;await spotifyApi.addTracksToPlaylist(this.state.userId,newId,trackUris);this.setState({newPlaylistId:newId,buttonPressed:true,loadingData:false});}async findCleanTrack(track){let isRecommended=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!track||!track.name||!track.artists||track.artists.length===0){console.warn(\"Invalid track data:\",track);return null;}const name=track.name.toLowerCase();const artist=track.artists[0].name.toLowerCase();const cacheKey=\"\".concat(name,\"-\").concat(artist);console.log(\"Generated cache key: \",cacheKey);console.log(this.cleanTrackCache[cacheKey]);if(this.cleanTrackCache[cacheKey]){console.log(\"Cache hit for: \",cacheKey);return this.cleanTrackCache[cacheKey];}try{const searchResult=await spotifyApi.search(\"track:\".concat(name,\" artist:\").concat(artist),['track']);const cleanTrack=searchResult.tracks.items.find(item=>{const itemName=item.name.toLowerCase();const itemArtists=item.artists.map(a=>a.name.toLowerCase());const isClean=!item.explicit;const isSameArtist=itemArtists.includes(artist);const isTitleClean=itemName.includes(\"clean\")||itemName.includes(\"radio\");return isClean&&isSameArtist&&(itemName===name||isTitleClean);});if(cleanTrack&&!isRecommended){console.log(\"Found clean track, adding to cache:\",cleanTrack);this.cleanTrackCache[cacheKey]=cleanTrack;localStorage.setItem('cleanTrackCache',JSON.stringify(this.cleanTrackCache));}return cleanTrack||null;}catch(error){console.error(\"Error finding clean track:\",error);return null;}}async getRecommended(tracks){const trackId=[];const tracksList=tracks.slice();const recTracks=[];// Limit the number of tracks to 5, if more than 5 tracks are provided\nif(tracks.length>5){tracksList.splice(5,tracks.length);}// Collect track IDs\ntracksList.forEach(item=>trackId.push(item.id));// Get recommendations from Spotify\nconst recommendedResult=await spotifyApi.getRecommendations({limit:10,seed_tracks:trackId});// Process each recommended track\nfor(const itemR of recommendedResult.tracks){if(itemR.explicit===true){const cleanTrack=await this.findCleanTrack(itemR,true);if(cleanTrack!==null){recTracks.push(cleanTrack);}}else{recTracks.push(itemR);}if(recTracks.length>=7){break;}}return recTracks;}unableToAdd(){this.timesClicked++;if(this.timesClicked%2===0){this.setState({revealUnable:true});}else{this.setState({revealUnable:false});}}async addTrack(track){// this.unaddCounter ++\nvar elem=document.getElementById(track.id);var counter=parseInt(elem.getAttribute(\"clicks\"));var uri=track.uri;counter++;if(counter%2===0){let addResult=await spotifyApi.addTracksToPlaylist(this.state.userId,this.state.newPlaylistId,[uri]);elem.style.backgroundColor=\"green\";elem.innerHTML=\"DONE\";}else{let addResult=await spotifyApi.removeTracksFromPlaylist(this.state.userId,this.state.newPlaylistId,[uri]);elem.style.backgroundColor=\"#565656\";elem.innerHTML=\"ADD\";}elem.setAttribute(\"clicks\",counter);}render(){const unavalible=this.noCleanVersions.map(function(item,index){index++;return/*#__PURE__*/React.createElement(\"p\",{key:item.id},\" \",index,\". \",item.name);});const recommendedTracks=this.recTracks.map(function(item){return/*#__PURE__*/React.createElement(\"div\",{key:item.id},/*#__PURE__*/React.createElement(\"div\",{className:\"row my-2\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col-3 col-lg-1 mt-3\"},/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:\"btn btn-add\",id:item.id,clicks:\"1\",onClick:()=>this.addTrack(item)},\"ADD\")),/*#__PURE__*/React.createElement(\"div\",{className:\"col-9 col-lg-11\"},/*#__PURE__*/React.createElement(\"iframe\",{src:\"https://open.spotify.com/embed/track/\"+item.id,width:\"90%\",height:\"80\",frameBorder:\"0\",allowtransparency:\"true\",allow:\"encrypted-media\",title:\"embeded-track\"}))));},this);return/*#__PURE__*/React.createElement(\"div\",{className:\"Clean col-12\"},this.state.buttonPressed?/*#__PURE__*/React.createElement(\"div\",{className:\"mx-auto\"},/*#__PURE__*/React.createElement(\"h3\",{className:\"font-weight-bold text-success\"},\" Your Playlist Is Cleanified! \"),/*#__PURE__*/React.createElement(\"p\",null,\" You're done! Your cleaned playlist is already saved to your library.\"),/*#__PURE__*/React.createElement(\"a\",{href:this.openPlaylist,target:\"_blank\",rel:\"noopener noreferrer\",className:\"btn btn-success\"},\" Open In Spotify \"),/*#__PURE__*/React.createElement(\"div\",{className:\"container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{id:\"fadeshow\",className:\"col\"},/*#__PURE__*/React.createElement(\"iframe\",{src:\"https://open.spotify.com/embed/playlist/\"+this.state.playlistId,width:\"100%\",height:\"100%\",frameBorder:\"0\",allowtransparency:\"true\",allow:\"encrypted-media\",title:\"embeded-playlist\"})),/*#__PURE__*/React.createElement(\"i\",{id:\"fadeshow\",className:\"fas fa-arrow-right text-success fa-2x\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"iframe\",{src:\"https://open.spotify.com/embed/playlist/\"+this.state.newPlaylistId,width:\"100%\",height:\"100%\",frameBorder:\"0\",allowtransparency:\"true\",allow:\"encrypted-media\",title:\"embeded-playlist\"})))),/*#__PURE__*/React.createElement(\"hr\",{className:\"divider mb-3\"}),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:\"btn btn-danger\",onClick:this.unableToAdd},\" Reveal Songs Unable to be Cleaned: \",this.noCleanVersions.length),this.state.revealUnable&&this.noCleanVersions.length>0?unavalible:this.state.revealUnable&&/*#__PURE__*/React.createElement(\"p\",null,\"Good News! We were able to find clean versions of each song!\"),this.noCleanVersions.length>0&&/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"hr\",{className:\"divider\"}),/*#__PURE__*/React.createElement(\"h2\",null,\"Recommended Clean Songs\"),/*#__PURE__*/React.createElement(\"p\",null,\"Based on the songs we were unable to add: \"),/*#__PURE__*/React.createElement(\"div\",{className:\"container\"},recommendedTracks)))):/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:\"btn btn-lg btn-success mt-3\",onClick:this.makeCleanPlaylist,disabled:this.state.loadingData},this.state.loadingData&&/*#__PURE__*/React.createElement(\"i\",{className:\"fa fa-compact-disc fa-spin text-white\"}),\"Clean Playlist\"),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"iframe\",{src:\"https://open.spotify.com/embed/playlist/\"+this.state.playlistId,width:\"60%\",height:\"400\",frameBorder:\"0\",allowtransparency:\"true\",allow:\"encrypted-media\",title:\"embeded-playlist\"})),/*#__PURE__*/React.createElement(\"p\",{className:\"text-muted\"},\" Note: Spotify's explicit content tags are applied based on information Spotify receives from rights-holders. They can\\u2019t guarantee all explicit content is marked as such. Cleanify will clean your playlist based off of Spotify's marked explicit/clean songs.\")));}}export default CleanPlaylist;","map":{"version":3,"names":["React","SpotifyWebApi","spotifyApi","CleanPlaylist","Component","constructor","props","state","userId","user","playlistName","name","playlistId","data","ownerId","buttonPressed","loadingData","newPlaylistId","revealUnable","explicitTracks","cleanTracks","noCleanVersions","recTracks","timesClicked","unaddCounter","openPlaylist","makeCleanPlaylist","bind","findCleanTrack","getRecommended","unableToAdd","addTrack","cleanTrackCache","JSON","parse","localStorage","getItem","getTracksData","owner","id","explicitTracksList","cleanTracksList","getPlaylistTracks","then","response","items","map","item","track","explicit","push","componentDidMount","window","scrollTo","console","log","setState","cleanTrackPromises","Promise","all","forEach","cleanTrack","index","length","trackUris","uri","playlistResult","createPlaylist","concat","external_urls","spotify","newId","addTracksToPlaylist","isRecommended","arguments","undefined","artists","warn","toLowerCase","artist","cacheKey","searchResult","search","tracks","find","itemName","itemArtists","a","isClean","isSameArtist","includes","isTitleClean","setItem","stringify","error","trackId","tracksList","slice","splice","recommendedResult","getRecommendations","limit","seed_tracks","itemR","elem","document","getElementById","counter","parseInt","getAttribute","addResult","style","backgroundColor","innerHTML","removeTracksFromPlaylist","setAttribute","render","unavalible","createElement","key","recommendedTracks","className","type","clicks","onClick","src","width","height","frameBorder","allowtransparency","allow","title","href","target","rel","disabled"],"sources":["/Users/brianaking/cleanify/src/components/CleanPlaylist.js"],"sourcesContent":["import React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      playlistName: this.props.name,\n      playlistId: this.props.data,\n      ownerId: '',\n      buttonPressed: false,\n      loadingData: false,\n      newPlaylistId: '',\n      revealUnable: false,\n    };\n\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.noCleanVersions = [];\n    this.recTracks = [];\n    this.timesClicked = 1;\n    this.unaddCounter = 1;\n    this.openPlaylist = \"\";\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this)\n    this.findCleanTrack = this.findCleanTrack.bind(this)\n    this.getRecommended = this.getRecommended.bind(this)\n    this.unableToAdd = this.unableToAdd.bind(this)\n    this.addTrack = this.addTrack.bind(this)\n\n    this.cleanTrackCache = JSON.parse(localStorage.getItem('cleanTrackCache')) || {};\n\n\n\n\n  }\n\n\n  getTracksData(owner, id){\n    var explicitTracksList = []\n    var cleanTracksList = []\n    spotifyApi.getPlaylistTracks(owner, id)\n      .then((response) => {\n        response.items.map((item) =>{\n          if(item.track.explicit === true){\n            explicitTracksList.push(item.track)\n          }else{\n            cleanTracksList.push(item.track)\n          }\n        })\n      })\n      this.explicitTracks = explicitTracksList\n      this.cleanTracks = cleanTracksList\n\n\n    }\n\n    componentDidMount(){\n      var playlistId = this.props.data\n      var ownerId = this.props.id\n      this.getTracksData(ownerId, playlistId)\n      window.scrollTo(0, 0)\n    }\n\n    async makeCleanPlaylist() {\n      console.log(\"CACHE STATE\")\n      console.log(this.cleanTrackCache);\n\n      this.setState({ loadingData: true });\n      \n      const cleanTrackPromises = this.explicitTracks.map(track => this.findCleanTrack(track));\n      console.log(cleanTrackPromises)\n    \n      const cleanTracks = await Promise.all(cleanTrackPromises);\n    \n      cleanTracks.forEach((cleanTrack, index) => {\n        if (cleanTrack) {\n          this.cleanTracks.push(cleanTrack); // Add clean track if found\n        } else {\n          this.noCleanVersions.push(this.explicitTracks[index]); // Track not found, add to noCleanVersions\n        }\n      });\n    \n      if (this.noCleanVersions.length > 0) {\n        this.recTracks = await this.getRecommended(this.noCleanVersions);\n      }\n    \n      const trackUris = this.cleanTracks.map(track => track.uri);\n    \n      const playlistResult = await spotifyApi.createPlaylist(this.state.userId, {\n        name: `${this.state.playlistName} (Clean)`\n      });\n    \n      this.openPlaylist = playlistResult.external_urls.spotify;\n      const newId = playlistResult.id;\n    \n      await spotifyApi.addTracksToPlaylist(this.state.userId, newId, trackUris);\n    \n      this.setState({\n        newPlaylistId: newId,\n        buttonPressed: true,\n        loadingData: false\n      });\n    }\n    \n    async findCleanTrack(track, isRecommended = false) {\n\n      if (!track || !track.name || !track.artists || track.artists.length === 0) {\n        console.warn(\"Invalid track data:\", track);\n        return null;\n      }\n    \n      const name = track.name.toLowerCase();\n      const artist = track.artists[0].name.toLowerCase();\n      const cacheKey = `${name}-${artist}`;\n      console.log(\"Generated cache key: \", cacheKey); \n      console.log(this.cleanTrackCache[cacheKey]);\n\n\n      if (this.cleanTrackCache[cacheKey]) {\n        console.log(\"Cache hit for: \", cacheKey);\n        return this.cleanTrackCache[cacheKey];\n      }\n\n    \n      try {\n        const searchResult = await spotifyApi.search(`track:${name} artist:${artist}`, ['track']);\n        const cleanTrack = searchResult.tracks.items.find(item => {\n          const itemName = item.name.toLowerCase();\n\n          const itemArtists = item.artists.map(a => a.name.toLowerCase());\n          const isClean = !item.explicit;\n          const isSameArtist = itemArtists.includes(artist);\n          \n          const isTitleClean = itemName.includes(\"clean\") || itemName.includes(\"radio\");\n    \n          return isClean && isSameArtist && (itemName === name || isTitleClean);\n        });    \n\n        if (cleanTrack && !isRecommended) {\n          console.log(\"Found clean track, adding to cache:\", cleanTrack);\n          this.cleanTrackCache[cacheKey] = cleanTrack;\n          localStorage.setItem('cleanTrackCache', JSON.stringify(this.cleanTrackCache));\n        }\n    \n  \n        return cleanTrack || null;\n      } catch (error) {\n        console.error(\"Error finding clean track:\", error);\n        return null;\n      }\n    }\n    \n    \n    async getRecommended(tracks) {\n      const trackId = [];\n      const tracksList = tracks.slice();\n      const recTracks = [];\n    \n      // Limit the number of tracks to 5, if more than 5 tracks are provided\n      if (tracks.length > 5) {\n        tracksList.splice(5, tracks.length);\n      }\n    \n      // Collect track IDs\n      tracksList.forEach(item => trackId.push(item.id));\n    \n      // Get recommendations from Spotify\n      const recommendedResult = await spotifyApi.getRecommendations({\n        limit: 10, \n        seed_tracks: trackId\n      });\n    \n      // Process each recommended track\n      for (const itemR of recommendedResult.tracks) {\n        if (itemR.explicit === true) {\n          const cleanTrack = await this.findCleanTrack(itemR,  true);\n          if (cleanTrack !== null) {\n            recTracks.push(cleanTrack);\n          }\n        } else {\n          recTracks.push(itemR);\n        }\n    \n        if (recTracks.length >= 7) {\n          break;\n        }\n      }\n          return recTracks;\n    }\n    \n\n   unableToAdd(){\n     this.timesClicked ++\n     if (this.timesClicked % 2 === 0){\n       this.setState({\n         revealUnable: true\n       })\n     }else{\n       this.setState({\n         revealUnable: false\n       })\n     }\n    }\n\n     async addTrack(track){\n       // this.unaddCounter ++\n       var elem = document.getElementById(track.id);\n       var counter = parseInt(elem.getAttribute(\"clicks\"))\n       var uri = track.uri\n       counter ++\n       if (counter % 2 === 0){\n         let addResult = await spotifyApi.addTracksToPlaylist(this.state.userId, this.state.newPlaylistId, [uri])\n         elem.style.backgroundColor = \"green\";\n         elem.innerHTML = \"DONE\";\n       }else{\n         let addResult = await spotifyApi.removeTracksFromPlaylist(this.state.userId, this.state.newPlaylistId, [uri])\n         elem.style.backgroundColor = \"#565656\";\n         elem.innerHTML = \"ADD\";\n\n       }\n       elem.setAttribute(\"clicks\", counter);\n    }\n\n\n  render(){\n\n    const unavalible =\n    this.noCleanVersions.map(function(item, index) {\n      index++\n      return (\n        <p key={item.id}> {index}. {item.name}</p>\n      )\n    });\n\n\n    const recommendedTracks =\n    this.recTracks.map(function(item) {\n      return (\n        <div key= {item.id}>\n        <div className=\"row my-2\">\n          <div className=\"col-3 col-lg-1 mt-3\">\n            <button type=\"button\" className=\"btn btn-add\" id={item.id} clicks = \"1\" onClick={() => this.addTrack(item)}>ADD</button>\n          </div>\n          <div className=\"col-9 col-lg-11\">\n            <iframe src= {\"https://open.spotify.com/embed/track/\" + item.id } width=\"90%\" height=\"80\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-track\"></iframe>\n          </div>\n        </div>\n        </div>\n      )\n    }, this);\n\n\n\n\n\n\n\n    return(\n      <div className= \"Clean col-12\">\n\n      {\n        this.state.buttonPressed ?\n        <div className= \"mx-auto\">\n          <h3 className=\"font-weight-bold text-success\"> Your Playlist Is Cleanified! </h3>\n          <p> You're done! Your cleaned playlist is already saved to your library.</p>\n            <a href= {this.openPlaylist} target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-success\"> Open In Spotify </a>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div id=\"fadeshow\" className=\"col\">\n              <iframe src= {\"https://open.spotify.com/embed/playlist/\" + this.state.playlistId} width=\"100%\" height=\"100%\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-playlist\"></iframe>\n            </div>\n            <i id=\"fadeshow\" className=\"fas fa-arrow-right text-success fa-2x\"></i>\n            <div className=\"col\">\n              <iframe src= {\"https://open.spotify.com/embed/playlist/\" + this.state.newPlaylistId} width=\"100%\" height=\"100%\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-playlist\"></iframe>\n            </div>\n          </div>\n        </div>\n          <hr className=\"divider mb-3\"/>\n\n          <div>\n            <button type=\"button\" className=\"btn btn-danger\" onClick={this.unableToAdd}> Reveal Songs Unable to be Cleaned: {this.noCleanVersions.length}</button>\n            {\n              this.state.revealUnable && this.noCleanVersions.length > 0 ?\n                unavalible\n              :\n              this.state.revealUnable &&\n               <p>Good News! We were able to find clean versions of each song!</p>\n            }\n            {\n              this.noCleanVersions.length > 0 &&\n              <div>\n              <hr className=\"divider\"/>\n              <h2>Recommended Clean Songs</h2>\n              <p>Based on the songs we were unable to add: </p>\n              <div className=\"container\">\n\n                {recommendedTracks}\n              </div>\n              </div>\n            }\n\n\n          </div>\n\n        </div>\n        :\n          <div>\n            <button type=\"button\" className=\"btn btn-lg btn-success mt-3\" onClick= {this.makeCleanPlaylist} disabled={this.state.loadingData}>\n            { this.state.loadingData &&\n              <i className=\"fa fa-compact-disc fa-spin text-white\"></i>\n            }\n            Clean Playlist\n            </button>\n\n            <div>\n              <iframe src= {\"https://open.spotify.com/embed/playlist/\" + this.state.playlistId} width=\"60%\" height=\"400\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-playlist\"></iframe>\n            </div>\n            <p className=\"text-muted\"> Note: Spotify's explicit content tags are applied based on information Spotify receives from rights-holders. They can’t guarantee all explicit content is marked as such. Cleanify will clean your playlist based off of Spotify's marked explicit/clean songs.</p>\n\n          </div>\n      }\n\n      </div>\n    )\n  }\n}\n\nexport default CleanPlaylist\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}