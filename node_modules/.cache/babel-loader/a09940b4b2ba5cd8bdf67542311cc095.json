{"ast":null,"code":"var _jsxFileName = \"/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js\";\nimport React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      playlistName: this.props.name,\n      playlistId: this.props.data,\n      ownerId: '',\n      buttonPressed: false,\n      newPlaylistId: ''\n    };\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this);\n    this.findCleanTracks = this.findCleanTracks.bind(this);\n  }\n\n  getTracksData(owner, id) {\n    var explicitTracksList = [];\n    var cleanTracksList = [];\n    spotifyApi.getPlaylistTracks(owner, id).then(response => {\n      console.log(response);\n      response.items.map(item => {\n        if (item.track.explicit === true) {\n          explicitTracksList.push(item.track);\n        } else {\n          cleanTracksList.push(item.track);\n        }\n      });\n    });\n    this.explicitTracks = explicitTracksList;\n    this.cleanTracks = cleanTracksList;\n    console.log(this.explicitTracks);\n    console.log(this.cleanTracks);\n  }\n\n  componentDidMount() {\n    var playlistId = this.props.data;\n    var ownerId = this.props.id;\n    this.getTracksData(ownerId, playlistId);\n  }\n\n  findCleanTracks(name, artist) {\n    return spotifyApi.search('track:' + '\"' + name + '\"' + ' artist:' + '\"' + artist + '\"', ['track']);\n  }\n\n  async makeCleanPlaylist() {\n    var itemE;\n\n    for (itemE of this.explicitTracks) {\n      let result = await this.findCleanTracks(itemE.name, itemE.artists[0].name);\n      console.log(result);\n      var itemC;\n\n      for (itemC of result.tracks.items) {\n        console.log(itemC);\n\n        if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")) {\n          this.cleanTracks.push(itemC);\n          console.log(\" ADDED: \" + itemC.name);\n        } else {\n          console.log(\"couldn't add: \" + itemC.name);\n        }\n      }\n    }\n\n    console.log(this.cleanTracks);\n    var trackUri = [];\n    var newId = '';\n    var x;\n\n    for (x of this.cleanTracks) {\n      trackUri.push(x.uri);\n    }\n\n    spotifyApi.createPlaylist(this.state.userId, {\n      name: this.state.playlistName + \"(Clean)\"\n    }).then(response => {\n      console.log(response);\n      newId = response.id;\n    }).then(() => {\n      console.log(newId);\n      spotifyApi.addTracksToPlaylist(this.state.userId, newId, trackUri);\n    });\n    this.setState({\n      buttonPressed: true,\n      newPlaylistId: newId\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Clean\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, this.buttonPressed ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, \"Hey\"), /*#__PURE__*/React.createElement(\"iframe\", {\n      src: \"https://open.spotify.com/embed/playlist/\" + this.state.newPlaylistId,\n      width: \"50%\",\n      height: \"500\",\n      frameBorder: \"0\",\n      allowtransparency: \"true\",\n      allow: \"encrypted-media\",\n      title: \"embeded-playlist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-lg btn-success\",\n      onClick: this.makeCleanPlaylist,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, \"Clean Playlist\")));\n  }\n\n}\n\nexport default CleanPlaylist;","map":{"version":3,"sources":["/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js"],"names":["React","SpotifyWebApi","spotifyApi","CleanPlaylist","Component","constructor","props","state","userId","user","playlistName","name","playlistId","data","ownerId","buttonPressed","newPlaylistId","explicitTracks","cleanTracks","makeCleanPlaylist","bind","findCleanTracks","getTracksData","owner","id","explicitTracksList","cleanTracksList","getPlaylistTracks","then","response","console","log","items","map","item","track","explicit","push","componentDidMount","artist","search","itemE","result","artists","itemC","tracks","includes","trackUri","newId","x","uri","createPlaylist","addTracksToPlaylist","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,MAAMC,UAAU,GAAG,IAAID,aAAJ,EAAnB;;AAEA,MAAME,aAAN,SAA4BH,KAAK,CAACI,SAAlC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWG,IADR;AAEXC,MAAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWK,IAFd;AAGXC,MAAAA,UAAU,EAAE,KAAKN,KAAL,CAAWO,IAHZ;AAIXC,MAAAA,OAAO,EAAE,EAJE;AAKXC,MAAAA,aAAa,EAAE,KALJ;AAMXC,MAAAA,aAAa,EAAE;AANJ,KAAb;AAQA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBD,IAArB,CAA0B,IAA1B,CAAvB;AACD;;AAEDE,EAAAA,aAAa,CAACC,KAAD,EAAQC,EAAR,EAAW;AACtB,QAAIC,kBAAkB,GAAG,EAAzB;AACA,QAAIC,eAAe,GAAG,EAAtB;AACAxB,IAAAA,UAAU,CAACyB,iBAAX,CAA6BJ,KAA7B,EAAoCC,EAApC,EACGI,IADH,CACSC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEAA,MAAAA,QAAQ,CAACG,KAAT,CAAeC,GAAf,CAAoBC,IAAD,IAAS;AAC1B,YAAGA,IAAI,CAACC,KAAL,CAAWC,QAAX,KAAwB,IAA3B,EAAgC;AAC9BX,UAAAA,kBAAkB,CAACY,IAAnB,CAAwBH,IAAI,CAACC,KAA7B;AACD,SAFD,MAEK;AACHT,UAAAA,eAAe,CAACW,IAAhB,CAAqBH,IAAI,CAACC,KAA1B;AACD;AACF,OAND;AAOD,KAXH;AAYE,SAAKlB,cAAL,GAAsBQ,kBAAtB;AACA,SAAKP,WAAL,GAAmBQ,eAAnB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,cAAjB;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,WAAjB;AAED;;AAEDoB,EAAAA,iBAAiB,GAAE;AACjB,QAAI1B,UAAU,GAAG,KAAKN,KAAL,CAAWO,IAA5B;AACA,QAAIC,OAAO,GAAG,KAAKR,KAAL,CAAWkB,EAAzB;AACA,SAAKF,aAAL,CAAmBR,OAAnB,EAA4BF,UAA5B;AACD;;AAEDS,EAAAA,eAAe,CAACV,IAAD,EAAO4B,MAAP,EAAc;AACzB,WAAOrC,UAAU,CAACsC,MAAX,CAAkB,WAAW,GAAX,GAAgB7B,IAAhB,GAAsB,GAAtB,GAA6B,UAA7B,GAAyC,GAAzC,GAA8C4B,MAA9C,GAAsD,GAAxE,EAA4E,CAAC,OAAD,CAA5E,CAAP;AACH;;AAED,QAAMpB,iBAAN,GAAyB;AACvB,QAAIsB,KAAJ;;AACA,SAAKA,KAAL,IAAc,KAAKxB,cAAnB,EAAmC;AACjC,UAAIyB,MAAM,GAAG,MAAM,KAAKrB,eAAL,CAAqBoB,KAAK,CAAC9B,IAA3B,EAAiC8B,KAAK,CAACE,OAAN,CAAc,CAAd,EAAiBhC,IAAlD,CAAnB;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAYW,MAAZ;AACA,UAAIE,KAAJ;;AACA,WAAKA,KAAL,IAAcF,MAAM,CAACG,MAAP,CAAcb,KAA5B,EAAkC;AAChCF,QAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;;AACA,YAAIH,KAAK,CAACE,OAAN,CAAc,CAAd,EAAiBhC,IAAjB,KAA0BiC,KAAK,CAACD,OAAN,CAAc,CAAd,EAAiBhC,IAA3C,IAAmD8B,KAAK,CAAC9B,IAAN,KAAeiC,KAAK,CAACjC,IAAxE,IAAgF,CAACiC,KAAK,CAACR,QAAvF,IAAmGQ,KAAK,CAACjC,IAAN,CAAWmC,QAAX,CAAoB,OAApB,CAAvG,EAAoI;AAClI,eAAK5B,WAAL,CAAiBmB,IAAjB,CAAsBO,KAAtB;AACAd,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAaa,KAAK,CAACjC,IAA/B;AACD,SAHD,MAGK;AACHmB,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBa,KAAK,CAACjC,IAArC;AACD;AACF;AACF;;AACDmB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,WAAjB;AACC,QAAI6B,QAAQ,GAAG,EAAf;AACA,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,CAAJ;;AACA,SAAKA,CAAL,IAAU,KAAK/B,WAAf,EAA2B;AACzB6B,MAAAA,QAAQ,CAACV,IAAT,CAAcY,CAAC,CAACC,GAAhB;AACD;;AACAhD,IAAAA,UAAU,CAACiD,cAAX,CAA0B,KAAK5C,KAAL,CAAWC,MAArC,EAA6C;AAACG,MAAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWG,YAAX,GAA0B;AAAjC,KAA7C,EACGkB,IADH,CACSC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAmB,MAAAA,KAAK,GAAGnB,QAAQ,CAACL,EAAjB;AACD,KAJH,EAKGI,IALH,CAKQ,MAAK;AACTE,MAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAZ;AACA9C,MAAAA,UAAU,CAACkD,mBAAX,CAA+B,KAAK7C,KAAL,CAAWC,MAA1C,EAAkDwC,KAAlD,EAAyDD,QAAzD;AACD,KARH;AAUA,SAAKM,QAAL,CAAc;AACZtC,MAAAA,aAAa,EAAE,IADH;AAEZC,MAAAA,aAAa,EAAEgC;AAFH,KAAd;AAIH;;AAEHM,EAAAA,MAAM,GAAE;AAIN,wBACE;AAAK,MAAA,SAAS,EAAE,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,KAAKvC,aAAL,gBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADA,eAEA;AAAQ,MAAA,GAAG,EAAG,6CAA6C,KAAKR,KAAL,CAAWS,aAAtE;AAAqF,MAAA,KAAK,EAAC,KAA3F;AAAiG,MAAA,MAAM,EAAC,KAAxG;AAA8G,MAAA,WAAW,EAAC,GAA1H;AAA8H,MAAA,iBAAiB,EAAC,MAAhJ;AAAuJ,MAAA,KAAK,EAAC,iBAA7J;AAA+K,MAAA,KAAK,EAAC,kBAArL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,CADA,gBAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,wBAAhC;AAAyD,MAAA,OAAO,EAAG,KAAKG,iBAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADA,CARF,CADF;AAeD;;AA3GwC;;AA8G3C,eAAehB,aAAf","sourcesContent":["import React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      playlistName: this.props.name,\n      playlistId: this.props.data,\n      ownerId: '',\n      buttonPressed: false,\n      newPlaylistId: ''\n    };\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this)\n    this.findCleanTracks = this.findCleanTracks.bind(this)\n  }\n\n  getTracksData(owner, id){\n    var explicitTracksList = []\n    var cleanTracksList = []\n    spotifyApi.getPlaylistTracks(owner, id)\n      .then((response) => {\n        console.log(response)\n\n        response.items.map((item) =>{\n          if(item.track.explicit === true){\n            explicitTracksList.push(item.track)\n          }else{\n            cleanTracksList.push(item.track)\n          }\n        })\n      })\n      this.explicitTracks = explicitTracksList\n      this.cleanTracks = cleanTracksList\n      console.log(this.explicitTracks)\n      console.log(this.cleanTracks)\n\n    }\n\n    componentDidMount(){\n      var playlistId = this.props.data\n      var ownerId = this.props.id\n      this.getTracksData(ownerId, playlistId)\n    }\n\n    findCleanTracks(name, artist){\n        return spotifyApi.search('track:' + '\"' +name+ '\"'  + ' artist:'+ '\"' +artist+ '\"',['track'])\n    }\n\n    async makeCleanPlaylist(){\n      var itemE;\n      for (itemE of this.explicitTracks) {\n        let result = await this.findCleanTracks(itemE.name, itemE.artists[0].name)\n        console.log(result)\n        var itemC;\n        for (itemC of result.tracks.items){\n          console.log(itemC)\n          if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")){\n            this.cleanTracks.push(itemC)\n            console.log(\" ADDED: \" + itemC.name)\n          }else{\n            console.log(\"couldn't add: \" + itemC.name)\n          }\n        }\n      }\n      console.log(this.cleanTracks)\n       var trackUri = [];\n       var newId = '';\n       var x;\n       for (x of this.cleanTracks){\n         trackUri.push(x.uri)\n       }\n        spotifyApi.createPlaylist(this.state.userId, {name: this.state.playlistName + \"(Clean)\"})\n          .then((response) => {\n            console.log(response)\n            newId = response.id\n          })\n          .then(()=> {\n            console.log(newId)\n            spotifyApi.addTracksToPlaylist(this.state.userId, newId, trackUri)\n          })\n\n        this.setState({\n          buttonPressed: true,\n          newPlaylistId: newId\n        })\n    }\n\n  render(){\n\n\n\n    return(\n      <div className= \"Clean\">\n      {\n        this.buttonPressed ?\n        <div>\n        <h1>Hey</h1>\n        <iframe src= {\"https://open.spotify.com/embed/playlist/\" + this.state.newPlaylistId} width=\"50%\" height=\"500\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-playlist\"></iframe>\n        </div>\n        :\n        <div>\n        <button type=\"button\" className=\"btn btn-lg btn-success\" onClick= {this.makeCleanPlaylist}>Clean Playlist</button>\n        </div>\n      }\n      </div>\n    )\n  }\n}\n\nexport default CleanPlaylist\n"]},"metadata":{},"sourceType":"module"}