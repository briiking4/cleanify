{"ast":null,"code":"var _jsxFileName = \"/Users/brianaking/Desktop/cleanify/client/src/components/CleanPlaylist.js\";\nimport React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      playlistName: this.props.name,\n      playlistId: this.props.data,\n      ownerId: '',\n      buttonPressed: false,\n      newPlaylistId: '',\n      revealUnable: false\n    };\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.noCleanVersions = [];\n    this.recTracks = [];\n    this.timesClicked = 1;\n    this.openPlaylist = \"\";\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this);\n    this.findCleanTrack = this.findCleanTracks.bind(this);\n    this.getRecommended = this.getRecommended.bind(this);\n    this.unableToAdd = this.unableToAdd.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n  }\n\n  getTracksData(owner, id) {\n    var explicitTracksList = [];\n    var cleanTracksList = [];\n    spotifyApi.getPlaylistTracks(owner, id).then(response => {\n      console.log(response);\n      response.items.map(item => {\n        if (item.track.explicit === true) {\n          explicitTracksList.push(item.track);\n        } else {\n          cleanTracksList.push(item.track);\n        }\n      });\n    });\n    this.explicitTracks = explicitTracksList;\n    this.cleanTracks = cleanTracksList;\n  }\n\n  componentDidMount() {\n    var playlistId = this.props.data;\n    var ownerId = this.props.id;\n    this.getTracksData(ownerId, playlistId);\n  }\n\n  async findCleanTrack(track) {\n    var name = track.name;\n    var artist = track.artists[0].name;\n    var cleanTrack;\n    var itemC;\n    var counter = 0;\n    let searchResult = await spotifyApi.search('track:' + '\"' + name + '\"' + ' artist:' + '\"' + artist + '\"', ['track']);\n\n    for (itemC of searchResult.tracks.items) {\n      if (itemC.explicit === false) {\n        if ((itemC.name === name || itemC.name.includes(\"Clean\")) && itemC.artists[0].name === artist && counter <= 0) {\n          cleanTrack = itemC;\n          counter++;\n        }\n      }\n    }\n\n    if (counter === 0) {\n      this.noCleanVersions.push(track);\n      cleanTrack = null;\n    }\n\n    return cleanTrack;\n  }\n\n  async makeCleanPlaylist() {\n    var itemE;\n\n    for (itemE of this.explicitTracks) {\n      let cleanTrack = await this.findCleanTrack(itemE);\n      console.log(cleanTrack);\n\n      if (cleanTrack === null) {\n        console.log(\"couldn't add: \" + itemE.name);\n      } else {\n        this.cleanTracks.push(cleanTrack);\n        console.log(\" ADDED: \" + cleanTrack.name);\n      }\n    }\n\n    if (this.noCleanVersions.length > 0) {\n      console.log(this.noCleanVersions);\n      this.getRecommended(this.noCleanVersions);\n    }\n\n    console.log(this.cleanTracks);\n    var trackUri = [];\n    var newId = '';\n    var x;\n\n    for (x of this.cleanTracks) {\n      trackUri.push(x.uri);\n    }\n\n    let playlistResult = await spotifyApi.createPlaylist(this.state.userId, {\n      name: this.state.playlistName + \"(Clean)\"\n    }); // console.log(playlistResult)\n\n    this.openPlaylist = playlistResult.external_urls.spotify;\n    newId = playlistResult.id;\n    let addResult = await spotifyApi.addTracksToPlaylist(this.state.userId, newId, trackUri); // console.log(addResult)\n\n    this.setState({\n      newPlaylistId: newId,\n      buttonPressed: true\n    });\n  }\n\n  async getRecommended(tracks) {\n    var trackId = [];\n    var tracksList = tracks.slice();\n\n    if (tracks.length > 5) {\n      tracksList.splice(5, tracks.length);\n    }\n\n    tracksList.map(item => {\n      trackId.push(item.id);\n    });\n    let recommededResult = await spotifyApi.getRecommendations({\n      limit: 20,\n      seed_tracks: trackId\n    });\n    console.log(recommededResult);\n    recommededResult.tracks.map(item => {\n      if (item.explicit === false) {\n        this.recTracks.push(item);\n      }\n    });\n    console.log(this.recTracks);\n  }\n\n  unableToAdd() {\n    this.timesClicked++;\n\n    if (this.timesClicked % 2 === 0) {\n      this.setState({\n        revealUnable: true\n      });\n    } else {\n      this.setState({\n        revealUnable: false\n      });\n    }\n  }\n\n  async addTrack(uri) {\n    let addResult = await spotifyApi.addTracksToPlaylist(this.state.userId, this.state.newPlaylistId, [uri]); // console.log(addResult)\n  }\n\n  render() {\n    const unavalible = this.noCleanVersions.map(function (item, index) {\n      index++;\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 9\n        }\n      }, \" \", index, \". \", item.name);\n    });\n    const recommendedTracks = this.recTracks.map(function (item) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row my-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-add\",\n        onClick: () => this.addTrack(item.uri),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }\n      }, \" ADD \")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"iframe\", {\n        src: \"https://open.spotify.com/embed/track/\" + item.id,\n        width: \"90%\",\n        height: \"80\",\n        frameBorder: \"0\",\n        allowtransparency: \"true\",\n        allow: \"encrypted-media\",\n        title: \"embeded-track\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }\n      }))));\n    }, this);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Clean\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 7\n      }\n    }, this.state.buttonPressed ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mx-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"font-weight-bold text-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }\n    }, \" Your Playlist Is Cleanified! \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }\n    }, \" You're done! We have already saved it to your library!\"), /*#__PURE__*/React.createElement(\"a\", {\n      href: this.openPlaylist,\n      className: \"btn btn-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }\n    }, \" Open In Spotify \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      src: \"https://open.spotify.com/embed/playlist/\" + this.state.playlistId,\n      width: \"80%\",\n      height: \"500\",\n      frameBorder: \"0\",\n      allowtransparency: \"true\",\n      allow: \"encrypted-media\",\n      title: \"embeded-playlist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-arrow-right text-success fa-2x\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      src: \"https://open.spotify.com/embed/playlist/\" + this.state.newPlaylistId,\n      width: \"80%\",\n      height: \"500\",\n      frameBorder: \"0\",\n      allowtransparency: \"true\",\n      allow: \"encrypted-media\",\n      title: \"embeded-playlist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"divider mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-danger\",\n      onClick: this.unableToAdd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }\n    }, \" Reveal Songs Unable to be Cleaned: \", this.noCleanVersions.length), this.state.revealUnable && this.noCleanVersions.length > 0 ? unavalible : this.state.revealUnable && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 16\n      }\n    }, \"Good News! We were able to find clean versions of each song!\"), this.noCleanVersions.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"divider mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 15\n      }\n    }, \"Recommended Songs\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 15\n      }\n    }, \"Based on the songs we were unable to add: \"), recommendedTracks))) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-lg btn-success\",\n      onClick: this.makeCleanPlaylist,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }\n    }, \"Clean Playlist\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      src: \"https://open.spotify.com/embed/playlist/\" + this.state.playlistId,\n      width: \"80%\",\n      height: \"500\",\n      frameBorder: \"0\",\n      allowtransparency: \"true\",\n      allow: \"encrypted-media\",\n      title: \"embeded-playlist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }\n    }, \" Note: Spotify's explicit content tags are applied based on information Spotify receives from rights-holders. They can\\u2019t guarantee all explicit content is marked as such.\")));\n  }\n\n}\n\nexport default CleanPlaylist;","map":{"version":3,"sources":["/Users/brianaking/Desktop/cleanify/client/src/components/CleanPlaylist.js"],"names":["React","SpotifyWebApi","spotifyApi","CleanPlaylist","Component","constructor","props","state","userId","user","playlistName","name","playlistId","data","ownerId","buttonPressed","newPlaylistId","revealUnable","explicitTracks","cleanTracks","noCleanVersions","recTracks","timesClicked","openPlaylist","makeCleanPlaylist","bind","findCleanTrack","findCleanTracks","getRecommended","unableToAdd","addTrack","getTracksData","owner","id","explicitTracksList","cleanTracksList","getPlaylistTracks","then","response","console","log","items","map","item","track","explicit","push","componentDidMount","artist","artists","cleanTrack","itemC","counter","searchResult","search","tracks","includes","itemE","length","trackUri","newId","x","uri","playlistResult","createPlaylist","external_urls","spotify","addResult","addTracksToPlaylist","setState","trackId","tracksList","slice","splice","recommededResult","getRecommendations","limit","seed_tracks","render","unavalible","index","recommendedTracks"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      playlistName: this.props.name,\n      playlistId: this.props.data,\n      ownerId: '',\n      buttonPressed: false,\n      newPlaylistId: '',\n      revealUnable: false\n    };\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.noCleanVersions = [];\n    this.recTracks = [];\n    this.timesClicked = 1;\n    this.openPlaylist = \"\";\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this)\n    this.findCleanTrack = this.findCleanTracks.bind(this)\n    this.getRecommended = this.getRecommended.bind(this)\n    this.unableToAdd = this.unableToAdd.bind(this)\n    this.addTrack = this.addTrack.bind(this)\n\n\n\n  }\n\n  getTracksData(owner, id){\n    var explicitTracksList = []\n    var cleanTracksList = []\n    spotifyApi.getPlaylistTracks(owner, id)\n      .then((response) => {\n        console.log(response)\n\n        response.items.map((item) =>{\n          if(item.track.explicit === true){\n            explicitTracksList.push(item.track)\n          }else{\n            cleanTracksList.push(item.track)\n          }\n        })\n      })\n      this.explicitTracks = explicitTracksList\n      this.cleanTracks = cleanTracksList\n\n\n    }\n\n    componentDidMount(){\n      var playlistId = this.props.data\n      var ownerId = this.props.id\n      this.getTracksData(ownerId, playlistId)\n    }\n\n    async findCleanTrack(track){\n      var name = track.name\n      var artist = track.artists[0].name\n      var cleanTrack;\n      var itemC;\n      var counter = 0;\n        let searchResult = await spotifyApi.search('track:'+ '\"' +name+ '\"' + ' artist:'+ '\"'+ artist + '\"' ,['track'])\n        for (itemC of searchResult.tracks.items){\n          if (itemC.explicit === false){\n            if((itemC.name === name || itemC.name.includes(\"Clean\")) && (itemC.artists[0].name === artist && counter <= 0) ){\n              cleanTrack = itemC\n              counter ++\n            }\n          }\n        }\n        if (counter === 0 ){\n          this.noCleanVersions.push(track)\n          cleanTrack = null\n        }\n\n        return cleanTrack\n    }\n\n    async makeCleanPlaylist(){\n      var itemE;\n      for (itemE of this.explicitTracks) {\n        let cleanTrack = await this.findCleanTrack(itemE)\n        console.log(cleanTrack)\n        if (cleanTrack === null){\n          console.log(\"couldn't add: \" + itemE.name)\n        }else{\n          this.cleanTracks.push(cleanTrack)\n          console.log(\" ADDED: \" + cleanTrack.name)\n        }\n      }\n\n      if (this.noCleanVersions.length > 0){\n        console.log(this.noCleanVersions)\n        this.getRecommended(this.noCleanVersions)\n      }\n\n\n      console.log(this.cleanTracks)\n\n       var trackUri = [];\n       var newId = '';\n       var x;\n       for (x of this.cleanTracks){\n         trackUri.push(x.uri)\n       }\n        let playlistResult = await spotifyApi.createPlaylist(this.state.userId, {name: this.state.playlistName + \"(Clean)\"})\n        // console.log(playlistResult)\n        this.openPlaylist = playlistResult.external_urls.spotify\n        newId = playlistResult.id\n\n        let addResult = await spotifyApi.addTracksToPlaylist(this.state.userId, newId, trackUri)\n        // console.log(addResult)\n\n        this.setState({\n          newPlaylistId: newId,\n          buttonPressed: true\n        })\n\n    }\n\n    async getRecommended(tracks){\n      var trackId = [];\n      var tracksList = tracks.slice();\n\n      if (tracks.length > 5){\n        tracksList.splice(5,tracks.length)\n      }\n\n      tracksList.map((item) => {\n        trackId.push(item.id)\n      })\n\n      let recommededResult = await spotifyApi.getRecommendations({limit: 20,seed_tracks: trackId})\n      console.log(recommededResult)\n\n        recommededResult.tracks.map((item) => {\n          if (item.explicit === false){\n            this.recTracks.push(item)\n          }\n        })\n\n\n      console.log(this.recTracks)\n\n    }\n\n   unableToAdd(){\n     this.timesClicked ++\n     if (this.timesClicked % 2 === 0){\n       this.setState({\n         revealUnable: true\n       })\n     }else{\n       this.setState({\n         revealUnable: false\n       })\n     }\n    }\n\n     async addTrack(uri){\n      let addResult = await spotifyApi.addTracksToPlaylist(this.state.userId, this.state.newPlaylistId, [uri])\n      // console.log(addResult)\n    }\n\n  render(){\n\n    const unavalible =\n    this.noCleanVersions.map(function(item, index) {\n      index++\n      return (\n        <p key={item.id}> {index}. {item.name}</p>\n      )\n    });\n\n\n    const recommendedTracks =\n    this.recTracks.map(function(item) {\n      return (\n        <div key= {item.id}>\n        <div className=\"row my-2\">\n          <div className=\"col\">\n            <button type=\"button\" className=\"btn btn-add\" onClick={() => this.addTrack(item.uri)}> ADD </button>\n          </div>\n          <div className=\"col-10\">\n            <iframe src= {\"https://open.spotify.com/embed/track/\" + item.id } width=\"90%\" height=\"80\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-track\"></iframe>\n          </div>\n        </div>\n        </div>\n      )\n    }, this);\n\n\n\n    return(\n      <div className= \"Clean\">\n\n      {\n        this.state.buttonPressed ?\n        <div className= \"mx-auto\">\n          <h3 className=\"font-weight-bold text-success\"> Your Playlist Is Cleanified! </h3>\n          <p> You're done! We have already saved it to your library!</p>\n            <a href= {this.openPlaylist} className=\"btn btn-success\"> Open In Spotify </a>\n          <div className=\"row\">\n            <div className=\"col\">\n              <iframe src= {\"https://open.spotify.com/embed/playlist/\" + this.state.playlistId} width=\"80%\" height=\"500\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-playlist\"></iframe>\n            </div>\n            <i className=\"fas fa-arrow-right text-success fa-2x\"></i>\n            <div className=\"col\">\n              <iframe src= {\"https://open.spotify.com/embed/playlist/\" + this.state.newPlaylistId} width=\"80%\" height=\"500\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-playlist\"></iframe>\n            </div>\n\n          </div>\n          <hr className=\"divider mb-5\"/>\n\n          <div>\n            <button type=\"button\" className=\"btn btn-danger\" onClick={this.unableToAdd}> Reveal Songs Unable to be Cleaned: {this.noCleanVersions.length}</button>\n            {\n              this.state.revealUnable && this.noCleanVersions.length > 0 ?\n                unavalible\n              :\n              this.state.revealUnable &&\n               <p>Good News! We were able to find clean versions of each song!</p>\n            }\n            {\n              this.noCleanVersions.length > 0 &&\n              <div>\n              <hr className=\"divider mt-5\"/>\n              <h2>Recommended Songs</h2>\n              <p>Based on the songs we were unable to add: </p>\n\n                {recommendedTracks}\n              </div>\n            }\n\n\n          </div>\n\n        </div>\n        :\n          <div>\n          <button type=\"button\" className=\"btn btn-lg btn-success\" onClick= {this.makeCleanPlaylist}>Clean Playlist</button>\n          <div>\n            <iframe src= {\"https://open.spotify.com/embed/playlist/\" + this.state.playlistId} width=\"80%\" height=\"500\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-playlist\"></iframe>\n          </div>\n          <p className=\"text-muted\"> Note: Spotify's explicit content tags are applied based on information Spotify receives from rights-holders. They can’t guarantee all explicit content is marked as such.</p>\n          </div>\n      }\n\n      </div>\n    )\n  }\n}\n\nexport default CleanPlaylist\n"]},"metadata":{},"sourceType":"module"}