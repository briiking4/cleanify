{"ast":null,"code":"var _jsxFileName = \"/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js\";\nimport React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      ownerId: '',\n      playlistName: this.props.name,\n      explicitTracks: [],\n      cleanTracks: [],\n      NewPlaylistTracks: []\n    };\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this);\n    this.findCleanTracks = this.findCleanTracks.bind(this);\n  }\n\n  getTracksData(owner, id) {\n    var explicitTracksList = [];\n    var cleanTracksList = [];\n    spotifyApi.getPlaylistTracks(owner, id).then(response => {\n      console.log(response);\n      response.items.map(item => {\n        if (item.track.explicit === true) {\n          explicitTracksList.push(item.track);\n        } else {\n          cleanTracksList.push(item.track);\n        }\n      });\n      this.setState({\n        explicitTracks: explicitTracksList,\n        cleanTracks: cleanTracksList\n      });\n      console.log(this.state.explicitTracks);\n      console.log(this.state.cleanTracks);\n    });\n    findCleanTracks();\n  }\n\n  findCleanTracks() {\n    var explicitList = this.state.explicitTracks;\n    explicitList.map(itemE => {\n      console.log(itemE);\n      spotifyApi.search('track:' + '\"' + itemE.name + '\"' + ' artist:' + '\"' + itemE.artists[0].name + '\"', ['track']).then(response => {\n        console.log(response);\n        response.tracks.items.map(itemC => {\n          console.log(itemC);\n\n          if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")) {\n            this.setState(state => {\n              const cleanTracks = state.cleanTracks.concat(itemC);\n              return {\n                cleanTracks: cleanTracks\n              };\n            });\n            console.log(\"YES: \" + itemC.name);\n          } else {\n            console.log(\"couldn't add: \" + itemC.name);\n          }\n        });\n      });\n    });\n    const trackUri = makeCleanPlaylist();\n    console.log(trackUri);\n  }\n\n  componentDidMount() {\n    console.log(\"mounted\");\n    var playlistId = this.props.data;\n    var ownerId = this.props.id;\n    this.getTracksData(ownerId, playlistId);\n  }\n\n  makeCleanPlaylist() {\n    console.log(this.state.cleanTracks);\n    var trackUri = [];\n    this.state.cleanTracks.map(item => {\n      trackUri.push(item.uri);\n    });\n    console.log(\"3\");\n    console.log(this.state.cleanTracks);\n    console.log(trackUri); // spotifyApi.createPlaylist(this.state.userId, {name: this.state.playlistName + \"(Clean)\"})\n    // .then((response) =>{\n    //   console.log(response)\n    // })\n\n    return trackUri;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-lg btn-success\",\n      onClick: this.makeCleanPlaylist,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, \"Clean Playlist\"));\n  }\n\n}\n\nexport default CleanPlaylist;","map":{"version":3,"sources":["/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js"],"names":["React","SpotifyWebApi","spotifyApi","CleanPlaylist","Component","constructor","props","state","userId","user","ownerId","playlistName","name","explicitTracks","cleanTracks","NewPlaylistTracks","makeCleanPlaylist","bind","findCleanTracks","getTracksData","owner","id","explicitTracksList","cleanTracksList","getPlaylistTracks","then","response","console","log","items","map","item","track","explicit","push","setState","explicitList","itemE","search","artists","tracks","itemC","includes","concat","trackUri","componentDidMount","playlistId","data","uri","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      ownerId: '',\n      playlistName: this.props.name,\n      explicitTracks: [],\n      cleanTracks: [],\n      NewPlaylistTracks: [],\n    };\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this)\n    this.findCleanTracks = this.findCleanTracks.bind(this)\n\n  }\n\n  getTracksData(owner, id){\n    var explicitTracksList = []\n    var cleanTracksList = []\n    spotifyApi.getPlaylistTracks(owner, id)\n      .then((response) => {\n        console.log(response)\n\n        response.items.map((item) =>{\n          if(item.track.explicit === true){\n            explicitTracksList.push(item.track)\n          }else{\n            cleanTracksList.push(item.track)\n          }\n        })\n          this.setState({\n            explicitTracks: explicitTracksList,\n            cleanTracks: cleanTracksList\n          })\n          console.log(this.state.explicitTracks)\n          console.log(this.state.cleanTracks)\n      })\n    findCleanTracks()\n    }\n\n    findCleanTracks(){\n      var explicitList = this.state.explicitTracks;\n      explicitList.map((itemE) =>{\n        console.log(itemE)\n        spotifyApi.search('track:' + '\"' +itemE.name+ '\"'  + ' artist:'+ '\"' +itemE.artists[0].name + '\"',['track'])\n          .then((response) => {\n            console.log(response)\n            response.tracks.items.map((itemC) =>{\n              console.log(itemC)\n              if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")){\n                this.setState((state) =>{\n                  const cleanTracks = state.cleanTracks.concat(itemC)\n                  return{\n                    cleanTracks: cleanTracks\n                  };\n                });\n                console.log(\"YES: \" + itemC.name)\n              }else{\n                console.log(\"couldn't add: \" + itemC.name)\n              }\n            })\n          })\n      })\n      const trackUri = makeCleanPlaylist()\n      console.log(trackUri)\n\n    }\n\n    componentDidMount(){\n      console.log(\"mounted\")\n      var playlistId = this.props.data\n      var ownerId = this.props.id\n      this.getTracksData(ownerId, playlistId)\n    }\n\n   makeCleanPlaylist(){\n     console.log(this.state.cleanTracks)\n     var trackUri = []\n      this.state.cleanTracks.map((item) =>{\n        trackUri.push(item.uri)\n      })\n      console.log(\"3\")\n      console.log(this.state.cleanTracks)\n      console.log(trackUri)\n\n      // spotifyApi.createPlaylist(this.state.userId, {name: this.state.playlistName + \"(Clean)\"})\n        // .then((response) =>{\n        //   console.log(response)\n        // })\n    return trackUri\n    }\n\n  render(){\n\n    return(\n      <div>\n      <button type=\"button\" className=\"btn btn-lg btn-success\" onClick= {this.makeCleanPlaylist}>Clean Playlist</button>\n      </div>\n\n    )\n  }\n}\n\nexport default CleanPlaylist\n"]},"metadata":{},"sourceType":"module"}