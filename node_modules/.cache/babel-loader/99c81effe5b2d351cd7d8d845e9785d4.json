{"ast":null,"code":"var _jsxFileName = \"/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js\";\nimport React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      playlistName: this.props.name,\n      playlistId: this.props.data,\n      ownerId: '',\n      NewPlaylistTracks: []\n    };\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this);\n    this.findCleanTracks = this.findCleanTracks.bind(this);\n  }\n\n  getTracksData(owner, id) {\n    var explicitTracksList = [];\n    var cleanTracksList = [];\n    spotifyApi.getPlaylistTracks(owner, id).then(response => {\n      console.log(response);\n      response.items.map(item => {\n        if (item.track.explicit === true) {\n          explicitTracksList.push(item.track);\n        } else {\n          cleanTracksList.push(item.track);\n        }\n      });\n    });\n    this.explicitTracks = explicitTracksList;\n    this.cleanTracks = cleanTracksList;\n    console.log(this.explicitTracks);\n    console.log(this.cleanTracks);\n  }\n\n  componentDidMount() {\n    var playlistId = this.props.data;\n    var ownerId = this.props.id;\n    this.getTracksData(ownerId, playlistId);\n  }\n\n  findCleanTracks(name, artist) {\n    // this.explicitTracks.map((itemE) =>{\n    //   console.log(itemE)\n    return spotifyApi.search('track:' + '\"' + name + '\"' + ' artist:' + '\"' + artist + '\"', ['track']); // .then((response) => {\n    //   console.log(response)\n    //   var itemC;\n    //   for (itemC of response.tracks.items){\n    //     console.log(itemC)\n    //     if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")){\n    //       this.cleanTracks.push(itemC)\n    //       console.log(\" ADDED: \" + itemC.name)\n    //     }else{\n    //       console.log(\"couldn't add: \" + itemC.name)\n    //     }\n    //   }\n    // })\n    // })\n  }\n\n  async makeCleanPlaylist() {\n    var itemE;\n\n    for (itemE of this.explicitTracks) {\n      let result = await this.findCleanTracks(itemE.name, itemE.artists[0].name);\n      console.log(result);\n      var itemC;\n\n      for (itemC of result.tracks.items) {\n        console.log(itemC);\n\n        if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")) {\n          this.cleanTracks.push(itemC);\n          console.log(\" ADDED: \" + itemC.name);\n        } else {\n          console.log(\"couldn't add: \" + itemC.name);\n        }\n      }\n    }\n\n    console.log(\"done\"); // var trackUri = [];\n    // var newId = '';\n    // var x;\n    // for (x of this.cleanTracks){\n    //   trackUri.push(x.uri)\n    // }\n    // spotifyApi.createPlaylist(this.state.userId, {name: this.state.playlistName + \"(Clean)\"})\n    //   .then((response) => {\n    //     console.log(response)\n    //     newId = response.id\n    //   })\n    //   .then(()=> {\n    //     console.log(newId)\n    //     spotifyApi.addTracksToPlaylist(this.state.userId, newId, trackUri)\n    //   })\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-lg btn-success\",\n      onClick: this.makeCleanPlaylist,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, \"Clean Playlist\"));\n  }\n\n}\n\nexport default CleanPlaylist;","map":{"version":3,"sources":["/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js"],"names":["React","SpotifyWebApi","spotifyApi","CleanPlaylist","Component","constructor","props","state","userId","user","playlistName","name","playlistId","data","ownerId","NewPlaylistTracks","explicitTracks","cleanTracks","makeCleanPlaylist","bind","findCleanTracks","getTracksData","owner","id","explicitTracksList","cleanTracksList","getPlaylistTracks","then","response","console","log","items","map","item","track","explicit","push","componentDidMount","artist","search","itemE","result","artists","itemC","tracks","includes","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      playlistName: this.props.name,\n      playlistId: this.props.data,\n      ownerId: '',\n      NewPlaylistTracks: [],\n    };\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this)\n    this.findCleanTracks = this.findCleanTracks.bind(this)\n\n  }\n\n  getTracksData(owner, id){\n    var explicitTracksList = []\n    var cleanTracksList = []\n    spotifyApi.getPlaylistTracks(owner, id)\n      .then((response) => {\n        console.log(response)\n\n        response.items.map((item) =>{\n          if(item.track.explicit === true){\n            explicitTracksList.push(item.track)\n          }else{\n            cleanTracksList.push(item.track)\n          }\n        })\n      })\n      this.explicitTracks = explicitTracksList\n      this.cleanTracks = cleanTracksList\n      console.log(this.explicitTracks)\n      console.log(this.cleanTracks)\n\n    }\n\n    componentDidMount(){\n      var playlistId = this.props.data\n      var ownerId = this.props.id\n      this.getTracksData(ownerId, playlistId)\n    }\n\n    findCleanTracks(name, artist){\n      // this.explicitTracks.map((itemE) =>{\n      //   console.log(itemE)\n        return spotifyApi.search('track:' + '\"' +name+ '\"'  + ' artist:'+ '\"' +artist+ '\"',['track'])\n          // .then((response) => {\n          //   console.log(response)\n          //   var itemC;\n          //   for (itemC of response.tracks.items){\n          //     console.log(itemC)\n          //     if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")){\n          //       this.cleanTracks.push(itemC)\n          //       console.log(\" ADDED: \" + itemC.name)\n          //     }else{\n          //       console.log(\"couldn't add: \" + itemC.name)\n          //     }\n          //   }\n          // })\n      // })\n    }\n\n    async makeCleanPlaylist(){\n      var itemE;\n      for (itemE of this.explicitTracks) {\n        let result = await this.findCleanTracks(itemE.name, itemE.artists[0].name)\n        console.log(result)\n        var itemC;\n        for (itemC of result.tracks.items){\n          console.log(itemC)\n          if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")){\n            this.cleanTracks.push(itemC)\n            console.log(\" ADDED: \" + itemC.name)\n          }else{\n            console.log(\"couldn't add: \" + itemC.name)\n          }\n        }\n      }\n      console.log(\"done\")\n     // var trackUri = [];\n     // var newId = '';\n     // var x;\n     // for (x of this.cleanTracks){\n     //   trackUri.push(x.uri)\n     // }\n      // spotifyApi.createPlaylist(this.state.userId, {name: this.state.playlistName + \"(Clean)\"})\n      //   .then((response) => {\n      //     console.log(response)\n      //     newId = response.id\n      //   })\n      //   .then(()=> {\n      //     console.log(newId)\n      //     spotifyApi.addTracksToPlaylist(this.state.userId, newId, trackUri)\n      //   })\n    }\n\n  render(){\n\n\n\n    return(\n      <div>\n      <button type=\"button\" className=\"btn btn-lg btn-success\" onClick= {this.makeCleanPlaylist}>Clean Playlist</button>\n      </div>\n\n    )\n  }\n}\n\nexport default CleanPlaylist\n"]},"metadata":{},"sourceType":"module"}