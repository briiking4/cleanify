{"ast":null,"code":"var _jsxFileName = \"/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js\";\nimport React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ownerId: '',\n      NewPlaylistTracks: []\n    };\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this);\n    this.findCleanTracks = this.findCleanTracks.bind(this);\n  }\n\n  getTracksData(owner, id) {\n    var explicitTracksList = [];\n    var cleanTracksList = [];\n    spotifyApi.getPlaylistTracks(owner, id).then(response => {\n      console.log(response);\n      response.items.map(item => {\n        if (item.track.explicit === true) {\n          explicitTracksList.push(item.track);\n        } else {\n          cleanTracksList.push(item.track);\n        }\n      });\n    });\n    this.explicitTracks = explicitTracksList;\n    this.cleanTracks = cleanTracksList;\n    console.log(this.explicitTracks);\n    console.log(this.cleanTracks);\n  }\n\n  findCleanTracks() {\n    // var explicitList = this.state.explicitTracks;\n    // const cleanList = [...this.state.cleanTracks];\n    // console.log(cleanList)\n    this.explicitTracks.map(itemE => {\n      console.log(itemE);\n      spotifyApi.search('track:' + '\"' + itemE.name + '\"' + ' artist:' + '\"' + itemE.artists[0].name + '\"', ['track']).then(response => {\n        console.log(response);\n        var itemC;\n\n        for (itemC of response.tracks.items) {\n          console.log(itemC);\n\n          if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")) {\n            this.cleanTracks.push(itemC);\n            console.log(this.cleanTracks);\n          } else {\n            console.log(\"couldn't add: \" + itemC.name);\n          }\n        }\n      });\n    });\n    console.log(this.cleanTracks);\n  }\n\n  componentDidMount() {\n    var playlistId = this.props.data;\n    var ownerId = this.props.id;\n    this.getTracksData(ownerId, playlistId);\n  }\n\n  makeCleanPlaylist(uri) {\n    this.findCleanTracks();\n    console.log(this.cleanTracks); // spotifyApi.createPlaylist(this.state.userId, {name: this.state.playlistName + \"(Clean)\"})\n    // .then((response) =>{\n    //   console.log(response)\n    // })\n  }\n\n  render() {\n    const trackUri = this.state.cleanTracks;\n    console.log(trackUri);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-lg btn-success\",\n      onClick: () => this.makeCleanPlaylist(trackUri),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }, \"Clean Playlist\"));\n  }\n\n}\n\nexport default CleanPlaylist;","map":{"version":3,"sources":["/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js"],"names":["React","SpotifyWebApi","spotifyApi","CleanPlaylist","Component","constructor","props","state","ownerId","NewPlaylistTracks","explicitTracks","cleanTracks","makeCleanPlaylist","bind","findCleanTracks","getTracksData","owner","id","explicitTracksList","cleanTracksList","getPlaylistTracks","then","response","console","log","items","map","item","track","explicit","push","itemE","search","name","artists","itemC","tracks","includes","componentDidMount","playlistId","data","uri","render","trackUri"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,MAAMC,UAAU,GAAG,IAAID,aAAJ,EAAnB;;AAEA,MAAME,aAAN,SAA4BH,KAAK,CAACI,SAAlC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXC,MAAAA,iBAAiB,EAAE;AAFR,KAAb;AAIA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBD,IAArB,CAA0B,IAA1B,CAAvB;AAED;;AAEDE,EAAAA,aAAa,CAACC,KAAD,EAAQC,EAAR,EAAW;AACtB,QAAIC,kBAAkB,GAAG,EAAzB;AACA,QAAIC,eAAe,GAAG,EAAtB;AACAjB,IAAAA,UAAU,CAACkB,iBAAX,CAA6BJ,KAA7B,EAAoCC,EAApC,EACGI,IADH,CACSC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEAA,MAAAA,QAAQ,CAACG,KAAT,CAAeC,GAAf,CAAoBC,IAAD,IAAS;AAC1B,YAAGA,IAAI,CAACC,KAAL,CAAWC,QAAX,KAAwB,IAA3B,EAAgC;AAC9BX,UAAAA,kBAAkB,CAACY,IAAnB,CAAwBH,IAAI,CAACC,KAA7B;AACD,SAFD,MAEK;AACHT,UAAAA,eAAe,CAACW,IAAhB,CAAqBH,IAAI,CAACC,KAA1B;AACD;AACF,OAND;AAOD,KAXH;AAYE,SAAKlB,cAAL,GAAsBQ,kBAAtB;AACA,SAAKP,WAAL,GAAmBQ,eAAnB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,cAAjB;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,WAAjB;AAED;;AAEDG,EAAAA,eAAe,GAAE;AACf;AACA;AACA;AAEA,SAAKJ,cAAL,CAAoBgB,GAApB,CAAyBK,KAAD,IAAU;AAChCR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACA7B,MAAAA,UAAU,CAAC8B,MAAX,CAAkB,WAAW,GAAX,GAAgBD,KAAK,CAACE,IAAtB,GAA4B,GAA5B,GAAmC,UAAnC,GAA+C,GAA/C,GAAoDF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiBD,IAArE,GAA4E,GAA9F,EAAkG,CAAC,OAAD,CAAlG,EACGZ,IADH,CACSC,QAAD,IAAc;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,YAAIa,KAAJ;;AACA,aAAKA,KAAL,IAAcb,QAAQ,CAACc,MAAT,CAAgBX,KAA9B,EAAoC;AAClCF,UAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;;AACA,cAAIJ,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiBD,IAAjB,KAA0BE,KAAK,CAACD,OAAN,CAAc,CAAd,EAAiBD,IAA3C,IAAmDF,KAAK,CAACE,IAAN,KAAeE,KAAK,CAACF,IAAxE,IAAgF,CAACE,KAAK,CAACN,QAAvF,IAAmGM,KAAK,CAACF,IAAN,CAAWI,QAAX,CAAoB,OAApB,CAAvG,EAAoI;AAClI,iBAAK1B,WAAL,CAAiBmB,IAAjB,CAAsBK,KAAtB;AACAZ,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,WAAjB;AACD,WAHD,MAGK;AACHY,YAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBW,KAAK,CAACF,IAArC;AACD;AACF;AACF,OAbH;AAcD,KAhBD;AAiBAV,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,WAAjB;AACD;;AAED2B,EAAAA,iBAAiB,GAAE;AACjB,QAAIC,UAAU,GAAG,KAAKjC,KAAL,CAAWkC,IAA5B;AACA,QAAIhC,OAAO,GAAG,KAAKF,KAAL,CAAWW,EAAzB;AACA,SAAKF,aAAL,CAAmBP,OAAnB,EAA4B+B,UAA5B;AACD;;AAEF3B,EAAAA,iBAAiB,CAAC6B,GAAD,EAAK;AACpB,SAAK3B,eAAL;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,WAAjB,EAFoB,CAKnB;AACE;AACA;AACA;AACH;;AAEH+B,EAAAA,MAAM,GAAE;AACN,UAAMC,QAAQ,GAAG,KAAKpC,KAAL,CAAWI,WAA5B;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYmB,QAAZ;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,wBAAhC;AAAyD,MAAA,OAAO,EAAG,MAAM,KAAK/B,iBAAL,CAAuB+B,QAAvB,CAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADA,CADF;AAMD;;AAxFwC;;AA2F3C,eAAexC,aAAf","sourcesContent":["import React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      ownerId: '',\n      NewPlaylistTracks: [],\n    };\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this)\n    this.findCleanTracks = this.findCleanTracks.bind(this)\n\n  }\n\n  getTracksData(owner, id){\n    var explicitTracksList = []\n    var cleanTracksList = []\n    spotifyApi.getPlaylistTracks(owner, id)\n      .then((response) => {\n        console.log(response)\n\n        response.items.map((item) =>{\n          if(item.track.explicit === true){\n            explicitTracksList.push(item.track)\n          }else{\n            cleanTracksList.push(item.track)\n          }\n        })\n      })\n      this.explicitTracks = explicitTracksList\n      this.cleanTracks = cleanTracksList\n      console.log(this.explicitTracks)\n      console.log(this.cleanTracks)\n\n    }\n\n    findCleanTracks(){\n      // var explicitList = this.state.explicitTracks;\n      // const cleanList = [...this.state.cleanTracks];\n      // console.log(cleanList)\n\n      this.explicitTracks.map((itemE) =>{\n        console.log(itemE)\n        spotifyApi.search('track:' + '\"' +itemE.name+ '\"'  + ' artist:'+ '\"' +itemE.artists[0].name + '\"',['track'])\n          .then((response) => {\n            console.log(response)\n            var itemC;\n            for (itemC of response.tracks.items){\n              console.log(itemC)\n              if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")){\n                this.cleanTracks.push(itemC)\n                console.log(this.cleanTracks)\n              }else{\n                console.log(\"couldn't add: \" + itemC.name)\n              }\n            }\n          })\n      })\n      console.log(this.cleanTracks)\n    }\n\n    componentDidMount(){\n      var playlistId = this.props.data\n      var ownerId = this.props.id\n      this.getTracksData(ownerId, playlistId)\n    }\n\n   makeCleanPlaylist(uri){\n     this.findCleanTracks()\n     console.log(this.cleanTracks)\n\n\n      // spotifyApi.createPlaylist(this.state.userId, {name: this.state.playlistName + \"(Clean)\"})\n        // .then((response) =>{\n        //   console.log(response)\n        // })\n    }\n\n  render(){\n    const trackUri = this.state.cleanTracks\n    console.log(trackUri)\n\n    return(\n      <div>\n      <button type=\"button\" className=\"btn btn-lg btn-success\" onClick= {() => this.makeCleanPlaylist(trackUri)}>Clean Playlist</button>\n      </div>\n\n    )\n  }\n}\n\nexport default CleanPlaylist\n"]},"metadata":{},"sourceType":"module"}