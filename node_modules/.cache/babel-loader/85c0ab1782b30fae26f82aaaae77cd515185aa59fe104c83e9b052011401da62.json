{"ast":null,"code":"var _jsxFileName = \"/Users/brianaking/cleanify/src/components/CleanPlaylist.js\";\nimport React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\nclass CleanPlaylist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      playlistName: this.props.name,\n      playlistId: this.props.data,\n      ownerId: '',\n      buttonPressed: false,\n      loadingData: false,\n      newPlaylistId: '',\n      revealUnable: false\n    };\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.noCleanVersions = [];\n    this.recTracks = [];\n    this.timesClicked = 1;\n    this.unaddCounter = 1;\n    this.openPlaylist = \"\";\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this);\n    this.findCleanTrack = this.findCleanTrack.bind(this);\n    this.getRecommended = this.getRecommended.bind(this);\n    this.unableToAdd = this.unableToAdd.bind(this);\n    this.addTrack = this.addTrack.bind(this);\n  }\n  getTracksData(owner, id) {\n    var explicitTracksList = [];\n    var cleanTracksList = [];\n    spotifyApi.getPlaylistTracks(owner, id).then(response => {\n      response.items.map(item => {\n        if (item.track.explicit === true) {\n          explicitTracksList.push(item.track);\n        } else {\n          cleanTracksList.push(item.track);\n        }\n      });\n    });\n    this.explicitTracks = explicitTracksList;\n    this.cleanTracks = cleanTracksList;\n  }\n  componentDidMount() {\n    var playlistId = this.props.data;\n    var ownerId = this.props.id;\n    this.getTracksData(ownerId, playlistId);\n    window.scrollTo(0, 0);\n  }\n  async makeCleanPlaylist() {\n    this.setState({\n      loadingData: true\n    });\n\n    // Process explicit tracks in parallel using Promise.all()\n    const cleanTrackPromises = this.explicitTracks.map(track => this.findCleanTrack(track));\n    const cleanTracks = await Promise.all(cleanTrackPromises);\n    cleanTracks.forEach((cleanTrack, index) => {\n      if (cleanTrack) {\n        this.cleanTracks.push(cleanTrack); // Add clean track if found\n      } else {\n        this.noCleanVersions.push(this.explicitTracks[index]); // Track not found, add to noCleanVersions\n      }\n    });\n    if (this.noCleanVersions.length > 0) {\n      this.recTracks = await this.getRecommended(this.noCleanVersions);\n    }\n    const trackUris = this.cleanTracks.map(track => track.uri);\n    const playlistResult = await spotifyApi.createPlaylist(this.state.userId, {\n      name: `${this.state.playlistName} (Clean)`\n    });\n    this.openPlaylist = playlistResult.external_urls.spotify;\n    const newId = playlistResult.id;\n    await spotifyApi.addTracksToPlaylist(this.state.userId, newId, trackUris);\n    this.setState({\n      newPlaylistId: newId,\n      buttonPressed: true,\n      loadingData: false\n    });\n  }\n  async findCleanTrack(track) {\n    if (!track || !track.name || !track.artists || track.artists.length === 0) {\n      console.warn(\"Invalid track data:\", track);\n      return null;\n    }\n    const name = track.name.toLowerCase();\n    const artist = track.artists[0].name.toLowerCase();\n    const cacheKey = `${name}-${artist}`;\n    if (this.cleanTrackCache && this.cleanTrackCache[cacheKey]) {\n      return this.cleanTrackCache[cacheKey];\n    }\n    try {\n      const searchResult = await spotifyApi.search(`track:${name} artist:${artist}`, ['track']);\n      const cleanTrack = searchResult.tracks.items.find(item => {\n        const itemName = item.name.toLowerCase();\n        const itemArtists = item.artists.map(a => a.name.toLowerCase());\n        return !item.explicit && itemName === name && itemArtists.includes(artist);\n      });\n      if (cleanTrack) {\n        this.cleanTrackCache[cacheKey] = cleanTrack;\n      }\n      return cleanTrack || null;\n    } catch (error) {\n      console.error(\"Error finding clean track:\", error);\n      return null;\n    }\n  }\n  async getRecommended(tracks) {\n    var trackId = [];\n    var tracksList = tracks.slice();\n    var recTracks = [];\n    if (tracks.length > 5) {\n      tracksList.splice(5, tracks.length);\n    }\n    tracksList.map(item => {\n      trackId.push(item.id);\n    });\n    let recommededResult = await spotifyApi.getRecommendations({\n      limit: 20,\n      seed_tracks: trackId\n    });\n    var itemR;\n    for (itemR of recommededResult.tracks) {\n      if (itemR.explicit === true) {\n        let cleanTrack = await this.findCleanTrack(itemR);\n        if (cleanTrack !== null) {\n          recTracks.push(cleanTrack);\n        }\n      } else {\n        recTracks.push(itemR);\n      }\n    }\n    if (recTracks.length > 10) {\n      recTracks = recTracks.slice(0, 7);\n    }\n    return recTracks;\n  }\n  unableToAdd() {\n    this.timesClicked++;\n    if (this.timesClicked % 2 === 0) {\n      this.setState({\n        revealUnable: true\n      });\n    } else {\n      this.setState({\n        revealUnable: false\n      });\n    }\n  }\n  async addTrack(track) {\n    // this.unaddCounter ++\n    var elem = document.getElementById(track.id);\n    var counter = parseInt(elem.getAttribute(\"clicks\"));\n    var uri = track.uri;\n    counter++;\n    if (counter % 2 === 0) {\n      let addResult = await spotifyApi.addTracksToPlaylist(this.state.userId, this.state.newPlaylistId, [uri]);\n      elem.style.backgroundColor = \"green\";\n      elem.innerHTML = \"DONE\";\n    } else {\n      let addResult = await spotifyApi.removeTracksFromPlaylist(this.state.userId, this.state.newPlaylistId, [uri]);\n      elem.style.backgroundColor = \"#565656\";\n      elem.innerHTML = \"ADD\";\n    }\n    elem.setAttribute(\"clicks\", counter);\n  }\n  render() {\n    const unavalible = this.noCleanVersions.map(function (item, index) {\n      index++;\n      return /*#__PURE__*/React.createElement(\"p\", {\n        key: item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 9\n        }\n      }, \" \", index, \". \", item.name);\n    });\n    const recommendedTracks = this.recTracks.map(function (item) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row my-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-3 col-lg-1 mt-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-add\",\n        id: item.id,\n        clicks: \"1\",\n        onClick: () => this.addTrack(item),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }\n      }, \"ADD\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-9 col-lg-11\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"iframe\", {\n        src: \"https://open.spotify.com/embed/track/\" + item.id,\n        width: \"90%\",\n        height: \"80\",\n        frameBorder: \"0\",\n        allowtransparency: \"true\",\n        allow: \"encrypted-media\",\n        title: \"embeded-track\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }\n      }))));\n    }, this);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Clean col-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 7\n      }\n    }, this.state.buttonPressed ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mx-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"font-weight-bold text-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }\n    }, \" Your Playlist Is Cleanified! \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }\n    }, \" You're done! We have already saved it to your library!\"), /*#__PURE__*/React.createElement(\"a\", {\n      href: this.openPlaylist,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      className: \"btn btn-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }\n    }, \" Open In Spotify \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"fadeshow\",\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      src: \"https://open.spotify.com/embed/playlist/\" + this.state.playlistId,\n      width: \"100%\",\n      height: \"100%\",\n      frameBorder: \"0\",\n      allowtransparency: \"true\",\n      allow: \"encrypted-media\",\n      title: \"embeded-playlist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"i\", {\n      id: \"fadeshow\",\n      className: \"fas fa-arrow-right text-success fa-2x\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      src: \"https://open.spotify.com/embed/playlist/\" + this.state.newPlaylistId,\n      width: \"100%\",\n      height: \"100%\",\n      frameBorder: \"0\",\n      allowtransparency: \"true\",\n      allow: \"encrypted-media\",\n      title: \"embeded-playlist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 15\n      }\n    })))), /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"divider mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-danger\",\n      onClick: this.unableToAdd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }\n    }, \" Reveal Songs Unable to be Cleaned: \", this.noCleanVersions.length), this.state.revealUnable && this.noCleanVersions.length > 0 ? unavalible : this.state.revealUnable && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 16\n      }\n    }, \"Good News! We were able to find clean versions of each song!\"), this.noCleanVersions.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"divider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 15\n      }\n    }, \"Recommended Clean Songs\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 15\n      }\n    }, \"Based on the songs we were unable to add: \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 15\n      }\n    }, recommendedTracks)))) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-lg btn-success mt-3\",\n      onClick: this.makeCleanPlaylist,\n      disabled: this.state.loadingData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 13\n      }\n    }, this.state.loadingData && /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-compact-disc fa-spin text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 15\n      }\n    }), \"Clean Playlist\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      src: \"https://open.spotify.com/embed/playlist/\" + this.state.playlistId,\n      width: \"60%\",\n      height: \"400\",\n      frameBorder: \"0\",\n      allowtransparency: \"true\",\n      allow: \"encrypted-media\",\n      title: \"embeded-playlist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"text-muted\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 13\n      }\n    }, \" Note: Spotify's explicit content tags are applied based on information Spotify receives from rights-holders. They can\\u2019t guarantee all explicit content is marked as such. Cleanify will clean your playlist based off of Spotify's marked explicit/clean songs.\")));\n  }\n}\nexport default CleanPlaylist;","map":{"version":3,"names":["React","SpotifyWebApi","spotifyApi","CleanPlaylist","Component","constructor","props","state","userId","user","playlistName","name","playlistId","data","ownerId","buttonPressed","loadingData","newPlaylistId","revealUnable","explicitTracks","cleanTracks","noCleanVersions","recTracks","timesClicked","unaddCounter","openPlaylist","makeCleanPlaylist","bind","findCleanTrack","getRecommended","unableToAdd","addTrack","getTracksData","owner","id","explicitTracksList","cleanTracksList","getPlaylistTracks","then","response","items","map","item","track","explicit","push","componentDidMount","window","scrollTo","setState","cleanTrackPromises","Promise","all","forEach","cleanTrack","index","length","trackUris","uri","playlistResult","createPlaylist","external_urls","spotify","newId","addTracksToPlaylist","artists","console","warn","toLowerCase","artist","cacheKey","cleanTrackCache","searchResult","search","tracks","find","itemName","itemArtists","a","includes","error","trackId","tracksList","slice","splice","recommededResult","getRecommendations","limit","seed_tracks","itemR","elem","document","getElementById","counter","parseInt","getAttribute","addResult","style","backgroundColor","innerHTML","removeTracksFromPlaylist","setAttribute","render","unavalible","createElement","key","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","recommendedTracks","className","type","clicks","onClick","src","width","height","frameBorder","allowtransparency","allow","title","href","target","rel","disabled"],"sources":["/Users/brianaking/cleanify/src/components/CleanPlaylist.js"],"sourcesContent":["import React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      playlistName: this.props.name,\n      playlistId: this.props.data,\n      ownerId: '',\n      buttonPressed: false,\n      loadingData: false,\n      newPlaylistId: '',\n      revealUnable: false,\n    };\n\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.noCleanVersions = [];\n    this.recTracks = [];\n    this.timesClicked = 1;\n    this.unaddCounter = 1;\n    this.openPlaylist = \"\";\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this)\n    this.findCleanTrack = this.findCleanTrack.bind(this)\n    this.getRecommended = this.getRecommended.bind(this)\n    this.unableToAdd = this.unableToAdd.bind(this)\n    this.addTrack = this.addTrack.bind(this)\n\n\n\n\n  }\n\n\n  getTracksData(owner, id){\n    var explicitTracksList = []\n    var cleanTracksList = []\n    spotifyApi.getPlaylistTracks(owner, id)\n      .then((response) => {\n        response.items.map((item) =>{\n          if(item.track.explicit === true){\n            explicitTracksList.push(item.track)\n          }else{\n            cleanTracksList.push(item.track)\n          }\n        })\n      })\n      this.explicitTracks = explicitTracksList\n      this.cleanTracks = cleanTracksList\n\n\n    }\n\n    componentDidMount(){\n      var playlistId = this.props.data\n      var ownerId = this.props.id\n      this.getTracksData(ownerId, playlistId)\n      window.scrollTo(0, 0)\n    }\n\n    async makeCleanPlaylist() {\n      this.setState({ loadingData: true });\n      \n      // Process explicit tracks in parallel using Promise.all()\n      const cleanTrackPromises = this.explicitTracks.map(track => this.findCleanTrack(track));\n    \n      const cleanTracks = await Promise.all(cleanTrackPromises);\n    \n      cleanTracks.forEach((cleanTrack, index) => {\n        if (cleanTrack) {\n          this.cleanTracks.push(cleanTrack); // Add clean track if found\n        } else {\n          this.noCleanVersions.push(this.explicitTracks[index]); // Track not found, add to noCleanVersions\n        }\n      });\n    \n      if (this.noCleanVersions.length > 0) {\n        this.recTracks = await this.getRecommended(this.noCleanVersions);\n      }\n    \n      const trackUris = this.cleanTracks.map(track => track.uri);\n    \n      const playlistResult = await spotifyApi.createPlaylist(this.state.userId, {\n        name: `${this.state.playlistName} (Clean)`\n      });\n    \n      this.openPlaylist = playlistResult.external_urls.spotify;\n      const newId = playlistResult.id;\n    \n      await spotifyApi.addTracksToPlaylist(this.state.userId, newId, trackUris);\n    \n      this.setState({\n        newPlaylistId: newId,\n        buttonPressed: true,\n        loadingData: false\n      });\n    }\n    \n    async findCleanTrack(track) {\n      if (!track || !track.name || !track.artists || track.artists.length === 0) {\n        console.warn(\"Invalid track data:\", track);\n        return null;\n      }\n    \n      const name = track.name.toLowerCase();\n      const artist = track.artists[0].name.toLowerCase();\n      const cacheKey = `${name}-${artist}`;\n    \n      if (this.cleanTrackCache && this.cleanTrackCache[cacheKey]) {\n        return this.cleanTrackCache[cacheKey];\n      }\n    \n      try {\n        const searchResult = await spotifyApi.search(`track:${name} artist:${artist}`, ['track']);\n        const cleanTrack = searchResult.tracks.items.find(item => {\n          const itemName = item.name.toLowerCase();\n          const itemArtists = item.artists.map(a => a.name.toLowerCase());\n          return !item.explicit && itemName === name && itemArtists.includes(artist);\n        });\n    \n        if (cleanTrack) {\n          this.cleanTrackCache[cacheKey] = cleanTrack;\n        }\n        return cleanTrack || null;\n      } catch (error) {\n        console.error(\"Error finding clean track:\", error);\n        return null;\n      }\n    }\n    \n    \n    \n\n    async getRecommended(tracks){\n      var trackId = [];\n      var tracksList = tracks.slice();\n      var recTracks =[];\n\n      if (tracks.length > 5){\n        tracksList.splice(5,tracks.length)\n      }\n\n      tracksList.map((item) => {\n        trackId.push(item.id)\n      })\n\n      let recommededResult = await spotifyApi.getRecommendations({limit: 20, seed_tracks: trackId})\n      var itemR;\n\n        for (itemR of recommededResult.tracks) {\n          if (itemR.explicit === true){\n            let cleanTrack = await this.findCleanTrack(itemR)\n            if (cleanTrack !== null){\n              recTracks.push(cleanTrack)\n            }\n\n          }else{\n            recTracks.push(itemR)\n          }\n        }\n\n        if (recTracks.length > 10){\n          recTracks = recTracks.slice(0,7)\n        }\n\n      return recTracks\n    }\n\n   unableToAdd(){\n     this.timesClicked ++\n     if (this.timesClicked % 2 === 0){\n       this.setState({\n         revealUnable: true\n       })\n     }else{\n       this.setState({\n         revealUnable: false\n       })\n     }\n    }\n\n     async addTrack(track){\n       // this.unaddCounter ++\n       var elem = document.getElementById(track.id);\n       var counter = parseInt(elem.getAttribute(\"clicks\"))\n       var uri = track.uri\n       counter ++\n       if (counter % 2 === 0){\n         let addResult = await spotifyApi.addTracksToPlaylist(this.state.userId, this.state.newPlaylistId, [uri])\n         elem.style.backgroundColor = \"green\";\n         elem.innerHTML = \"DONE\";\n       }else{\n         let addResult = await spotifyApi.removeTracksFromPlaylist(this.state.userId, this.state.newPlaylistId, [uri])\n         elem.style.backgroundColor = \"#565656\";\n         elem.innerHTML = \"ADD\";\n\n       }\n       elem.setAttribute(\"clicks\", counter);\n    }\n\n\n  render(){\n\n    const unavalible =\n    this.noCleanVersions.map(function(item, index) {\n      index++\n      return (\n        <p key={item.id}> {index}. {item.name}</p>\n      )\n    });\n\n\n    const recommendedTracks =\n    this.recTracks.map(function(item) {\n      return (\n        <div key= {item.id}>\n        <div className=\"row my-2\">\n          <div className=\"col-3 col-lg-1 mt-3\">\n            <button type=\"button\" className=\"btn btn-add\" id={item.id} clicks = \"1\" onClick={() => this.addTrack(item)}>ADD</button>\n          </div>\n          <div className=\"col-9 col-lg-11\">\n            <iframe src= {\"https://open.spotify.com/embed/track/\" + item.id } width=\"90%\" height=\"80\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-track\"></iframe>\n          </div>\n        </div>\n        </div>\n      )\n    }, this);\n\n\n\n\n\n\n\n    return(\n      <div className= \"Clean col-12\">\n\n      {\n        this.state.buttonPressed ?\n        <div className= \"mx-auto\">\n          <h3 className=\"font-weight-bold text-success\"> Your Playlist Is Cleanified! </h3>\n          <p> You're done! We have already saved it to your library!</p>\n            <a href= {this.openPlaylist} target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-success\"> Open In Spotify </a>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div id=\"fadeshow\" className=\"col\">\n              <iframe src= {\"https://open.spotify.com/embed/playlist/\" + this.state.playlistId} width=\"100%\" height=\"100%\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-playlist\"></iframe>\n            </div>\n            <i id=\"fadeshow\" className=\"fas fa-arrow-right text-success fa-2x\"></i>\n            <div className=\"col\">\n              <iframe src= {\"https://open.spotify.com/embed/playlist/\" + this.state.newPlaylistId} width=\"100%\" height=\"100%\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-playlist\"></iframe>\n            </div>\n          </div>\n        </div>\n          <hr className=\"divider mb-3\"/>\n\n          <div>\n            <button type=\"button\" className=\"btn btn-danger\" onClick={this.unableToAdd}> Reveal Songs Unable to be Cleaned: {this.noCleanVersions.length}</button>\n            {\n              this.state.revealUnable && this.noCleanVersions.length > 0 ?\n                unavalible\n              :\n              this.state.revealUnable &&\n               <p>Good News! We were able to find clean versions of each song!</p>\n            }\n            {\n              this.noCleanVersions.length > 0 &&\n              <div>\n              <hr className=\"divider\"/>\n              <h2>Recommended Clean Songs</h2>\n              <p>Based on the songs we were unable to add: </p>\n              <div className=\"container\">\n\n                {recommendedTracks}\n              </div>\n              </div>\n            }\n\n\n          </div>\n\n        </div>\n        :\n          <div>\n            <button type=\"button\" className=\"btn btn-lg btn-success mt-3\" onClick= {this.makeCleanPlaylist} disabled={this.state.loadingData}>\n            { this.state.loadingData &&\n              <i className=\"fa fa-compact-disc fa-spin text-white\"></i>\n            }\n            Clean Playlist\n            </button>\n\n            <div>\n              <iframe src= {\"https://open.spotify.com/embed/playlist/\" + this.state.playlistId} width=\"60%\" height=\"400\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-playlist\"></iframe>\n            </div>\n            <p className=\"text-muted\"> Note: Spotify's explicit content tags are applied based on information Spotify receives from rights-holders. They can’t guarantee all explicit content is marked as such. Cleanify will clean your playlist based off of Spotify's marked explicit/clean songs.</p>\n\n          </div>\n      }\n\n      </div>\n    )\n  }\n}\n\nexport default CleanPlaylist\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}