{"ast":null,"code":"var _jsxFileName = \"/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js\";\nimport React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      playlistName: this.props.name,\n      playlistId: this.props.data,\n      ownerId: '',\n      buttonPressed: false,\n      newPlaylistId: ''\n    };\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.noCleanVersions = [];\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this);\n    this.findCleanTracks = this.findCleanTracks.bind(this);\n  }\n\n  getTracksData(owner, id) {\n    var explicitTracksList = [];\n    var cleanTracksList = [];\n    spotifyApi.getPlaylistTracks(owner, id).then(response => {\n      console.log(response);\n      response.items.map(item => {\n        if (item.track.explicit === true) {\n          explicitTracksList.push(item.track);\n        } else {\n          cleanTracksList.push(item.track);\n        }\n      });\n    });\n    this.explicitTracks = explicitTracksList;\n    this.cleanTracks = cleanTracksList;\n    console.log(this.explicitTracks);\n    console.log(this.cleanTracks);\n  }\n\n  componentDidMount() {\n    var playlistId = this.props.data;\n    var ownerId = this.props.id;\n    this.getTracksData(ownerId, playlistId);\n  }\n\n  findCleanTracks(name, artist) {\n    return spotifyApi.search('track:' + '\"' + name + '\"' + ' artist:' + '\"' + artist + '\"', ['track']);\n  }\n\n  async makeCleanPlaylist() {\n    var notAval = [];\n    var itemE;\n\n    for (itemE of this.explicitTracks) {\n      let searchResult = await this.findCleanTracks(itemE.name, itemE.artists[0].name);\n      console.log(searchResult);\n      var itemC;\n      var counter = 0;\n\n      for (itemC of searchResult.tracks.items) {\n        console.log(itemC);\n\n        if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")) {\n          if (counter < 1) {\n            this.cleanTracks.push(itemC);\n            console.log(\" ADDED: \" + itemC.name);\n          }\n\n          counter++;\n        } else {\n          console.log(\"couldn't add: \" + itemC.name);\n        }\n\n        if (counter === 0) {}\n      }\n    }\n\n    console.log(this.cleanTracks);\n    var trackUri = [];\n    var newId = '';\n    var x;\n\n    for (x of this.cleanTracks) {\n      trackUri.push(x.uri);\n    }\n\n    let playlistResult = await spotifyApi.createPlaylist(this.state.userId, {\n      name: this.state.playlistName + \"(Clean)\"\n    });\n    console.log(playlistResult);\n    newId = playlistResult.id;\n    let addResult = await spotifyApi.addTracksToPlaylist(this.state.userId, newId, trackUri);\n    console.log(addResult);\n    this.setState({\n      newPlaylistId: newId,\n      buttonPressed: true\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Clean\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, this.state.buttonPressed ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"font-weight-bold text-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, \" Your Playlist Is Cleanified! \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, \" You're done! We have already saved it to your library!\"), /*#__PURE__*/React.createElement(\"iframe\", {\n      src: \"https://open.spotify.com/embed/playlist/\" + this.state.newPlaylistId,\n      width: \"50%\",\n      height: \"500\",\n      frameBorder: \"0\",\n      allowtransparency: \"true\",\n      allow: \"encrypted-media\",\n      title: \"embeded-playlist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"hr\", {\n      className: \"divider mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-lg btn-success\",\n      onClick: this.makeCleanPlaylist,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, \"Clean Playlist\")));\n  }\n\n}\n\nexport default CleanPlaylist;","map":{"version":3,"sources":["/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js"],"names":["React","SpotifyWebApi","spotifyApi","CleanPlaylist","Component","constructor","props","state","userId","user","playlistName","name","playlistId","data","ownerId","buttonPressed","newPlaylistId","explicitTracks","cleanTracks","noCleanVersions","makeCleanPlaylist","bind","findCleanTracks","getTracksData","owner","id","explicitTracksList","cleanTracksList","getPlaylistTracks","then","response","console","log","items","map","item","track","explicit","push","componentDidMount","artist","search","notAval","itemE","searchResult","artists","itemC","counter","tracks","includes","trackUri","newId","x","uri","playlistResult","createPlaylist","addResult","addTracksToPlaylist","setState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qBAAP;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,MAAMC,UAAU,GAAG,IAAID,aAAJ,EAAnB;;AAEA,MAAME,aAAN,SAA4BH,KAAK,CAACI,SAAlC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWG,IADR;AAEXC,MAAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWK,IAFd;AAGXC,MAAAA,UAAU,EAAE,KAAKN,KAAL,CAAWO,IAHZ;AAIXC,MAAAA,OAAO,EAAE,EAJE;AAKXC,MAAAA,aAAa,EAAE,KALJ;AAMXC,MAAAA,aAAa,EAAE;AANJ,KAAb;AAQA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBD,IAArB,CAA0B,IAA1B,CAAvB;AACD;;AAEDE,EAAAA,aAAa,CAACC,KAAD,EAAQC,EAAR,EAAW;AACtB,QAAIC,kBAAkB,GAAG,EAAzB;AACA,QAAIC,eAAe,GAAG,EAAtB;AACAzB,IAAAA,UAAU,CAAC0B,iBAAX,CAA6BJ,KAA7B,EAAoCC,EAApC,EACGI,IADH,CACSC,QAAD,IAAc;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEAA,MAAAA,QAAQ,CAACG,KAAT,CAAeC,GAAf,CAAoBC,IAAD,IAAS;AAC1B,YAAGA,IAAI,CAACC,KAAL,CAAWC,QAAX,KAAwB,IAA3B,EAAgC;AAC9BX,UAAAA,kBAAkB,CAACY,IAAnB,CAAwBH,IAAI,CAACC,KAA7B;AACD,SAFD,MAEK;AACHT,UAAAA,eAAe,CAACW,IAAhB,CAAqBH,IAAI,CAACC,KAA1B;AACD;AACF,OAND;AAOD,KAXH;AAYE,SAAKnB,cAAL,GAAsBS,kBAAtB;AACA,SAAKR,WAAL,GAAmBS,eAAnB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKf,cAAjB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,WAAjB;AAED;;AAEDqB,EAAAA,iBAAiB,GAAE;AACjB,QAAI3B,UAAU,GAAG,KAAKN,KAAL,CAAWO,IAA5B;AACA,QAAIC,OAAO,GAAG,KAAKR,KAAL,CAAWmB,EAAzB;AACA,SAAKF,aAAL,CAAmBT,OAAnB,EAA4BF,UAA5B;AACD;;AAEDU,EAAAA,eAAe,CAACX,IAAD,EAAO6B,MAAP,EAAc;AACzB,WAAOtC,UAAU,CAACuC,MAAX,CAAkB,WAAW,GAAX,GAAgB9B,IAAhB,GAAsB,GAAtB,GAA6B,UAA7B,GAAyC,GAAzC,GAA8C6B,MAA9C,GAAsD,GAAxE,EAA4E,CAAC,OAAD,CAA5E,CAAP;AACH;;AAED,QAAMpB,iBAAN,GAAyB;AACvB,QAAIsB,OAAO,GAAG,EAAd;AACA,QAAIC,KAAJ;;AACA,SAAKA,KAAL,IAAc,KAAK1B,cAAnB,EAAmC;AACjC,UAAI2B,YAAY,GAAG,MAAM,KAAKtB,eAAL,CAAqBqB,KAAK,CAAChC,IAA3B,EAAiCgC,KAAK,CAACE,OAAN,CAAc,CAAd,EAAiBlC,IAAlD,CAAzB;AACAoB,MAAAA,OAAO,CAACC,GAAR,CAAYY,YAAZ;AACA,UAAIE,KAAJ;AACA,UAAIC,OAAO,GAAG,CAAd;;AACA,WAAKD,KAAL,IAAcF,YAAY,CAACI,MAAb,CAAoBf,KAAlC,EAAwC;AACtCF,QAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;;AACA,YAAIH,KAAK,CAACE,OAAN,CAAc,CAAd,EAAiBlC,IAAjB,KAA0BmC,KAAK,CAACD,OAAN,CAAc,CAAd,EAAiBlC,IAA3C,IAAmDgC,KAAK,CAAChC,IAAN,KAAemC,KAAK,CAACnC,IAAxE,IAAgF,CAACmC,KAAK,CAACT,QAAvF,IAAmGS,KAAK,CAACnC,IAAN,CAAWsC,QAAX,CAAoB,OAApB,CAAvG,EAAoI;AAClI,cAAIF,OAAO,GAAG,CAAd,EAAgB;AACd,iBAAK7B,WAAL,CAAiBoB,IAAjB,CAAsBQ,KAAtB;AACAf,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAac,KAAK,CAACnC,IAA/B;AACD;;AACDoC,UAAAA,OAAO;AACR,SAND,MAMK;AACHhB,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBc,KAAK,CAACnC,IAArC;AACD;;AACD,YAAIoC,OAAO,KAAK,CAAhB,EAAkB,CAEjB;AACF;AACF;;AACDhB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,WAAjB;AACC,QAAIgC,QAAQ,GAAG,EAAf;AACA,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,CAAJ;;AACA,SAAKA,CAAL,IAAU,KAAKlC,WAAf,EAA2B;AACzBgC,MAAAA,QAAQ,CAACZ,IAAT,CAAcc,CAAC,CAACC,GAAhB;AACD;;AACA,QAAIC,cAAc,GAAG,MAAMpD,UAAU,CAACqD,cAAX,CAA0B,KAAKhD,KAAL,CAAWC,MAArC,EAA6C;AAACG,MAAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWG,YAAX,GAA0B;AAAjC,KAA7C,CAA3B;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAYsB,cAAZ;AACAH,IAAAA,KAAK,GAAGG,cAAc,CAAC7B,EAAvB;AAEA,QAAI+B,SAAS,GAAG,MAAMtD,UAAU,CAACuD,mBAAX,CAA+B,KAAKlD,KAAL,CAAWC,MAA1C,EAAkD2C,KAAlD,EAAyDD,QAAzD,CAAtB;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAYwB,SAAZ;AAEA,SAAKE,QAAL,CAAc;AACZ1C,MAAAA,aAAa,EAAEmC,KADH;AAEZpC,MAAAA,aAAa,EAAE;AAFH,KAAd;AAIH;;AAEH4C,EAAAA,MAAM,GAAE;AAGN,wBACE;AAAK,MAAA,SAAS,EAAE,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE,KAAKpD,KAAL,CAAWQ,aAAX,gBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,+BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAFF,eAGE;AAAQ,MAAA,GAAG,EAAG,6CAA6C,KAAKR,KAAL,CAAWS,aAAtE;AAAqF,MAAA,KAAK,EAAC,KAA3F;AAAiG,MAAA,MAAM,EAAC,KAAxG;AAA8G,MAAA,WAAW,EAAC,GAA1H;AAA8H,MAAA,iBAAiB,EAAC,MAAhJ;AAAuJ,MAAA,KAAK,EAAC,iBAA7J;AAA+K,MAAA,KAAK,EAAC,kBAArL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAIE;AAAI,MAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADA,gBAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,wBAAhC;AAAyD,MAAA,OAAO,EAAG,KAAKI,iBAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CAXF,CADF;AAkBD;;AAnHwC;;AAsH3C,eAAejB,aAAf","sourcesContent":["import React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      playlistName: this.props.name,\n      playlistId: this.props.data,\n      ownerId: '',\n      buttonPressed: false,\n      newPlaylistId: '',\n    };\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.noCleanVersions = [];\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this)\n    this.findCleanTracks = this.findCleanTracks.bind(this)\n  }\n\n  getTracksData(owner, id){\n    var explicitTracksList = []\n    var cleanTracksList = []\n    spotifyApi.getPlaylistTracks(owner, id)\n      .then((response) => {\n        console.log(response)\n\n        response.items.map((item) =>{\n          if(item.track.explicit === true){\n            explicitTracksList.push(item.track)\n          }else{\n            cleanTracksList.push(item.track)\n          }\n        })\n      })\n      this.explicitTracks = explicitTracksList\n      this.cleanTracks = cleanTracksList\n      console.log(this.explicitTracks)\n      console.log(this.cleanTracks)\n\n    }\n\n    componentDidMount(){\n      var playlistId = this.props.data\n      var ownerId = this.props.id\n      this.getTracksData(ownerId, playlistId)\n    }\n\n    findCleanTracks(name, artist){\n        return spotifyApi.search('track:' + '\"' +name+ '\"'  + ' artist:'+ '\"' +artist+ '\"',['track'])\n    }\n\n    async makeCleanPlaylist(){\n      var notAval = [];\n      var itemE;\n      for (itemE of this.explicitTracks) {\n        let searchResult = await this.findCleanTracks(itemE.name, itemE.artists[0].name)\n        console.log(searchResult)\n        var itemC;\n        var counter = 0;\n        for (itemC of searchResult.tracks.items){\n          console.log(itemC)\n          if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")){\n            if (counter < 1){\n              this.cleanTracks.push(itemC)\n              console.log(\" ADDED: \" + itemC.name)\n            }\n            counter ++\n          }else{\n            console.log(\"couldn't add: \" + itemC.name)\n          }\n          if (counter === 0){\n\n          }\n        }\n      }\n      console.log(this.cleanTracks)\n       var trackUri = [];\n       var newId = '';\n       var x;\n       for (x of this.cleanTracks){\n         trackUri.push(x.uri)\n       }\n        let playlistResult = await spotifyApi.createPlaylist(this.state.userId, {name: this.state.playlistName + \"(Clean)\"})\n        console.log(playlistResult)\n        newId = playlistResult.id\n\n        let addResult = await spotifyApi.addTracksToPlaylist(this.state.userId, newId, trackUri)\n        console.log(addResult)\n\n        this.setState({\n          newPlaylistId: newId,\n          buttonPressed: true\n        })\n    }\n\n  render(){\n\n\n    return(\n      <div className= \"Clean\">\n\n      {\n        this.state.buttonPressed ?\n        <div>\n          <h3 className=\"font-weight-bold text-success\"> Your Playlist Is Cleanified! </h3>\n          <p> You're done! We have already saved it to your library!</p>\n          <iframe src= {\"https://open.spotify.com/embed/playlist/\" + this.state.newPlaylistId} width=\"50%\" height=\"500\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-playlist\"></iframe>\n          <hr className=\"divider mb-5\"/>\n        </div>\n        :\n        <div>\n          <button type=\"button\" className=\"btn btn-lg btn-success\" onClick= {this.makeCleanPlaylist}>Clean Playlist</button>\n        </div>\n      }\n      </div>\n    )\n  }\n}\n\nexport default CleanPlaylist\n"]},"metadata":{},"sourceType":"module"}