{"ast":null,"code":"var _jsxFileName = \"/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js\";\nimport React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ownerId: '',\n      explicitTracks: [],\n      cleanTracks: [],\n      NewPlaylistTracks: []\n    };\n    this.createNewClean = this.createNewClean.bind(this);\n  }\n\n  componentDidMount() {\n    const playlistId = this.props.data;\n    const ownerId = this.props.id;\n    this.getTracksData(ownerId, playlistId);\n  }\n\n  getTracksData(owner, id) {\n    var explicitTracksList = [];\n    var cleanTracksList = [];\n    spotifyApi.getPlaylistTracks(owner, id).then(response => {\n      console.log(response);\n      response.items.map(item => {\n        if (item.track.explicit === true) {\n          explicitTracksList.push(item);\n        } else {\n          cleanTracksList.push(item);\n        }\n      });\n      this.setState({\n        explicitTracks: explicitTracksList,\n        cleanTracks: cleanTracksList\n      });\n      console.log(this.state.explicitTracks);\n      console.log(this.state.cleanTracks);\n    });\n  }\n\n  createNewClean() {\n    var explicitList = this.state.explicitTracks;\n    var cleanList = [];\n    explicitList.map(itemE => {\n      // console.log(itemE)\n      spotifyApi.search('track:' + '\"' + itemE.track.name + '\"' + ' artist:' + '\"' + itemE.track.artists[0].name + '\"', ['track']).then(response => {\n        console.log(response);\n        response.tracks.items.map(itemC => {\n          // console.log(itemC)\n          if (itemE.track.artists[0].name === itemC.artists[0].name && itemE.track.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")) {\n            cleanList.push(itemC);\n            console.log(\"YES\" + itemC.name);\n          } else {\n            console.log(\"couldn't add \" + itemC.name);\n          }\n        });\n      });\n    });\n    this.setState({\n      cleanTracks: this.state.cleanTracks.push(cleanList)\n    });\n    spotifyApi.createPlaylist(this.ownerId).then(response => {\n      console.log(response);\n    });\n    console.log(this.state.cleanTracks);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-lg btn-success\",\n      onClick: this.createNewClean,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, \"Clean Playlist\"));\n  }\n\n}\n\nexport default CleanPlaylist;","map":{"version":3,"sources":["/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js"],"names":["React","SpotifyWebApi","spotifyApi","CleanPlaylist","Component","constructor","props","state","ownerId","explicitTracks","cleanTracks","NewPlaylistTracks","createNewClean","bind","componentDidMount","playlistId","data","id","getTracksData","owner","explicitTracksList","cleanTracksList","getPlaylistTracks","then","response","console","log","items","map","item","track","explicit","push","setState","explicitList","cleanList","itemE","search","name","artists","tracks","itemC","includes","createPlaylist","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      ownerId: '',\n      explicitTracks: [],\n      cleanTracks: [],\n      NewPlaylistTracks: []\n    };\n    this.createNewClean = this.createNewClean.bind(this)\n  }\n\n  componentDidMount(){\n    const playlistId = this.props.data\n    const ownerId = this.props.id\n    this.getTracksData(ownerId, playlistId)\n  }\n\n  getTracksData(owner, id){\n    var explicitTracksList = []\n    var cleanTracksList = []\n    spotifyApi.getPlaylistTracks(owner, id)\n      .then((response) => {\n        console.log(response)\n\n        response.items.map((item) =>{\n          if(item.track.explicit === true){\n            explicitTracksList.push(item)\n          }else{\n            cleanTracksList.push(item)\n          }\n        })\n          this.setState({\n            explicitTracks: explicitTracksList,\n            cleanTracks: cleanTracksList\n          })\n          console.log(this.state.explicitTracks)\n          console.log(this.state.cleanTracks)\n\n      })\n    }\n\n    createNewClean(){\n      var explicitList = this.state.explicitTracks\n      var cleanList = []\n      explicitList.map((itemE) =>{\n        // console.log(itemE)\n        spotifyApi.search('track:' + '\"' +itemE.track.name+ '\"'  + ' artist:'+ '\"' +itemE.track.artists[0].name + '\"',['track'])\n          .then((response) => {\n            console.log(response)\n            response.tracks.items.map((itemC) =>{\n              // console.log(itemC)\n              if (itemE.track.artists[0].name === itemC.artists[0].name && itemE.track.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")){\n                cleanList.push(itemC)\n                console.log(\"YES\" + itemC.name)\n              }else{\n                console.log(\"couldn't add \" + itemC.name)\n              }\n            })\n          })\n      })\n      this.setState({\n        cleanTracks: this.state.cleanTracks.push(cleanList)\n      })\n      spotifyApi.createPlaylist(this.ownerId)\n        .then((response) => {\n          console.log(response)\n        })\n      console.log(this.state.cleanTracks)\n    }\n\n  render(){\n    return(\n      <div>\n      <button type=\"button\" className=\"btn btn-lg btn-success\" onClick={this.createNewClean}>Clean Playlist</button>\n      </div>\n    )\n  }\n}\n\nexport default CleanPlaylist\n"]},"metadata":{},"sourceType":"module"}