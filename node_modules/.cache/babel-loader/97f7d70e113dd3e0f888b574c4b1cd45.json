{"ast":null,"code":"var _jsxFileName = \"/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js\";\nimport React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      playlistName: this.props.name,\n      playlistId: this.props.data,\n      ownerId: '',\n      NewPlaylistTracks: []\n    };\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this);\n    this.findCleanTracks = this.findCleanTracks.bind(this);\n  }\n\n  getTracksData(owner, id) {\n    var explicitTracksList = [];\n    var cleanTracksList = [];\n    spotifyApi.getPlaylistTracks(owner, id).then(response => {\n      console.log(response);\n      response.items.map(item => {\n        if (item.track.explicit === true) {\n          explicitTracksList.push(item.track);\n        } else {\n          cleanTracksList.push(item.track);\n        }\n      });\n    });\n    this.explicitTracks = explicitTracksList;\n    this.cleanTracks = cleanTracksList;\n    console.log(this.explicitTracks);\n    console.log(this.cleanTracks);\n  }\n\n  componentDidMount() {\n    var playlistId = this.props.data;\n    var ownerId = this.props.id;\n    this.getTracksData(ownerId, playlistId);\n  }\n\n  findCleanTracks() {\n    this.explicitTracks.map(itemE => {\n      console.log(itemE);\n      spotifyApi.search('track:' + '\"' + itemE.name + '\"' + ' artist:' + '\"' + itemE.artists[0].name + '\"', ['track']).then(response => {\n        console.log(response);\n        var itemC;\n\n        for (itemC of response.tracks.items) {\n          console.log(itemC);\n\n          if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")) {\n            this.cleanTracks.push(itemC);\n            console.log(\" ADDED: \" + itemC.name);\n          } else {\n            console.log(\"couldn't add: \" + itemC.name);\n          }\n        }\n      }).then(() => {\n        this.makeCleanPlaylist();\n      });\n    });\n  }\n\n  makeCleanPlaylist() {\n    var trackUri = [];\n    var newId = '';\n    var x;\n\n    for (x of this.cleanTracks) {\n      trackUri.push(x.uri);\n    }\n\n    spotifyApi.createPlaylist(this.state.userId, {\n      name: this.state.playlistName + \"(Clean)\"\n    }).then(response => {\n      console.log(response);\n      newId = response.id;\n    }).then(() => {\n      console.log(newId);\n      spotifyApi.addTracksToPlaylist(this.state.userId, newId, trackUri);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-lg btn-success\",\n      onClick: this.findCleanTracks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, \"Clean Playlist\"));\n  }\n\n}\n\nexport default CleanPlaylist;","map":{"version":3,"sources":["/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js"],"names":["React","SpotifyWebApi","spotifyApi","CleanPlaylist","Component","constructor","props","state","userId","user","playlistName","name","playlistId","data","ownerId","NewPlaylistTracks","explicitTracks","cleanTracks","makeCleanPlaylist","bind","findCleanTracks","getTracksData","owner","id","explicitTracksList","cleanTracksList","getPlaylistTracks","then","response","console","log","items","map","item","track","explicit","push","componentDidMount","itemE","search","artists","itemC","tracks","includes","trackUri","newId","x","uri","createPlaylist","addTracksToPlaylist","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      playlistName: this.props.name,\n      playlistId: this.props.data,\n      ownerId: '',\n      NewPlaylistTracks: [],\n    };\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this)\n    this.findCleanTracks = this.findCleanTracks.bind(this)\n\n  }\n\n  getTracksData(owner, id){\n    var explicitTracksList = []\n    var cleanTracksList = []\n    spotifyApi.getPlaylistTracks(owner, id)\n      .then((response) => {\n        console.log(response)\n\n        response.items.map((item) =>{\n          if(item.track.explicit === true){\n            explicitTracksList.push(item.track)\n          }else{\n            cleanTracksList.push(item.track)\n          }\n        })\n      })\n      this.explicitTracks = explicitTracksList\n      this.cleanTracks = cleanTracksList\n      console.log(this.explicitTracks)\n      console.log(this.cleanTracks)\n\n    }\n\n    componentDidMount(){\n      var playlistId = this.props.data\n      var ownerId = this.props.id\n      this.getTracksData(ownerId, playlistId)\n    }\n\n    findCleanTracks(){\n      this.explicitTracks.map((itemE) =>{\n        console.log(itemE)\n        spotifyApi.search('track:' + '\"' +itemE.name+ '\"'  + ' artist:'+ '\"' +itemE.artists[0].name + '\"',['track'])\n          .then((response) => {\n            console.log(response)\n            var itemC;\n            for (itemC of response.tracks.items){\n              console.log(itemC)\n              if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")){\n                this.cleanTracks.push(itemC)\n                console.log(\" ADDED: \" + itemC.name)\n              }else{\n                console.log(\"couldn't add: \" + itemC.name)\n              }\n            }\n          })\n          .then(() =>{\n            this.makeCleanPlaylist()\n          })\n      })\n    }\n\n   makeCleanPlaylist(){\n     var trackUri = [];\n     var newId = '';\n     var x;\n     for (x of this.cleanTracks){\n       trackUri.push(x.uri)\n     }\n      spotifyApi.createPlaylist(this.state.userId, {name: this.state.playlistName + \"(Clean)\"})\n        .then((response) => {\n          console.log(response)\n          newId = response.id\n        })\n        .then(()=> {\n          console.log(newId)\n          spotifyApi.addTracksToPlaylist(this.state.userId, newId, trackUri)\n        })\n    }\n\n  render(){\n\n\n\n    return(\n      <div>\n      <button type=\"button\" className=\"btn btn-lg btn-success\" onClick= {this.findCleanTracks}>Clean Playlist</button>\n      </div>\n\n    )\n  }\n}\n\nexport default CleanPlaylist\n"]},"metadata":{},"sourceType":"module"}