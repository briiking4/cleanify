{"ast":null,"code":"var _jsxFileName = \"/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js\";\nimport React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      ownerId: '',\n      playlistName: this.props.name,\n      explicitTracks: [],\n      cleanTracks: [],\n      NewPlaylistTracks: []\n    };\n    this.findCleanTracks = this.findCleanTracks.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"mounted\");\n    var playlistId = this.props.data;\n    var ownerId = this.props.id;\n    this.getTracksData(ownerId, playlistId);\n  }\n\n  getTracksData(owner, id) {\n    var explicitTracksList = [];\n    var cleanTracksList = [];\n    spotifyApi.getPlaylistTracks(owner, id).then(response => {\n      console.log(response);\n      response.items.map(item => {\n        if (item.track.explicit === true) {\n          explicitTracksList.push(item.track);\n        } else {\n          cleanTracksList.push(item.track);\n        }\n      });\n      this.setState({\n        explicitTracks: explicitTracksList,\n        cleanTracks: cleanTracksList\n      });\n      console.log(this.state.explicitTracks);\n      console.log(this.state.cleanTracks);\n    });\n  }\n\n  findCleanTracks() {\n    const explicitList = this.state.explicitTracks;\n    explicitList.map(itemE => {\n      console.log(itemE);\n      spotifyApi.search('track:' + '\"' + itemE.name + '\"' + ' artist:' + '\"' + itemE.artists[0].name + '\"', ['track']).then(response => {\n        console.log(response);\n        response.tracks.items.map(itemC => {\n          console.log(itemC);\n\n          if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")) {\n            this.setState(state => {\n              const cleanTracks = state.cleanTracks.concat(itemC);\n              return {\n                cleanTracks: cleanTracks\n              };\n            });\n            console.log(\"YES: \" + itemC.name);\n          } else {\n            console.log(\"couldn't add: \" + itemC.name);\n          }\n        });\n      });\n    });\n  }\n\n  render() {\n    function makeClean() {\n      const getCleanTracks = this.findCleanTracks();\n      console.log(this.state.cleanTracks);\n      spotifyApi.createPlaylist(this.state.userId, {\n        name: this.state.playlistName + \"(Clean)\"\n      }).then(response => {\n        console.log(response);\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-lg btn-success\",\n      onClick: makeClean(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }, \"Clean Playlist\"));\n  }\n\n}\n\nexport default CleanPlaylist;","map":{"version":3,"sources":["/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js"],"names":["React","SpotifyWebApi","spotifyApi","CleanPlaylist","Component","constructor","props","state","userId","user","ownerId","playlistName","name","explicitTracks","cleanTracks","NewPlaylistTracks","findCleanTracks","bind","componentDidMount","console","log","playlistId","data","id","getTracksData","owner","explicitTracksList","cleanTracksList","getPlaylistTracks","then","response","items","map","item","track","explicit","push","setState","explicitList","itemE","search","artists","tracks","itemC","includes","concat","render","makeClean","getCleanTracks","createPlaylist"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      ownerId: '',\n      playlistName: this.props.name,\n      explicitTracks: [],\n      cleanTracks: [],\n      NewPlaylistTracks: [],\n    };\n    this.findCleanTracks = this.findCleanTracks.bind(this)\n  }\n\n\n  componentDidMount(){\n    console.log(\"mounted\")\n    var playlistId = this.props.data\n    var ownerId = this.props.id\n    this.getTracksData(ownerId, playlistId)\n  }\n\n  getTracksData(owner, id){\n    var explicitTracksList = []\n    var cleanTracksList = []\n    spotifyApi.getPlaylistTracks(owner, id)\n      .then((response) => {\n        console.log(response)\n\n        response.items.map((item) =>{\n          if(item.track.explicit === true){\n            explicitTracksList.push(item.track)\n          }else{\n            cleanTracksList.push(item.track)\n          }\n        })\n          this.setState({\n            explicitTracks: explicitTracksList,\n            cleanTracks: cleanTracksList\n          })\n          console.log(this.state.explicitTracks)\n          console.log(this.state.cleanTracks)\n      })\n    }\n\n    findCleanTracks(){\n      const explicitList = this.state.explicitTracks;\n      explicitList.map((itemE) =>{\n        console.log(itemE)\n        spotifyApi.search('track:' + '\"' +itemE.name+ '\"'  + ' artist:'+ '\"' +itemE.artists[0].name + '\"',['track'])\n          .then((response) => {\n            console.log(response)\n            response.tracks.items.map((itemC) =>{\n              console.log(itemC)\n              if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")){\n                this.setState((state) =>{\n                  const cleanTracks = state.cleanTracks.concat(itemC)\n                  return{\n                    cleanTracks: cleanTracks\n                  };\n                });\n                console.log(\"YES: \" + itemC.name)\n              }else{\n                console.log(\"couldn't add: \" + itemC.name)\n              }\n            })\n          })\n      })\n    }\n\n\n\n  render(){\n\n    function makeClean(){\n      const getCleanTracks = this.findCleanTracks();\n      console.log(this.state.cleanTracks)\n      spotifyApi.createPlaylist(this.state.userId, {name: this.state.playlistName + \"(Clean)\"})\n        .then((response) =>{\n          console.log(response)\n        })\n    }\n\n    return(\n      <div>\n      <button type=\"button\" className=\"btn btn-lg btn-success\" onClick= {makeClean()}>Clean Playlist</button>\n      </div>\n\n    )\n  }\n}\n\nexport default CleanPlaylist\n"]},"metadata":{},"sourceType":"module"}