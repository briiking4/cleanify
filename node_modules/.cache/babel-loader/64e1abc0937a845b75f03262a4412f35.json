{"ast":null,"code":"var _jsxFileName = \"/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js\";\nimport React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      ownerId: '',\n      playlistName: this.props.name,\n      explicitTracks: [],\n      cleanTracks: [],\n      NewPlaylistTracks: []\n    };\n    this.makeClean = this.makeClean.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"mounted\");\n    var playlistId = this.props.data;\n    var ownerId = this.props.id;\n    this.getTracksData(ownerId, playlistId);\n  }\n\n  getTracksData(owner, id) {\n    var explicitTracksList = [];\n    var cleanTracksList = [];\n    spotifyApi.getPlaylistTracks(owner, id).then(response => {\n      console.log(response);\n      response.items.map(item => {\n        if (item.track.explicit === true) {\n          explicitTracksList.push(item.track);\n        } else {\n          cleanTracksList.push(item.track);\n        }\n      });\n      this.setState({\n        explicitTracks: explicitTracksList,\n        cleanTracks: cleanTracksList\n      });\n      console.log(this.state.explicitTracks);\n      console.log(this.state.cleanTracks);\n    });\n  }\n\n  findCleanTracks() {\n    const explicitList = this.state.explicitTracks; // const cleanList = [];\n\n    explicitList.map(itemE => {\n      console.log(itemE);\n      spotifyApi.search('track:' + '\"' + itemE.name + '\"' + ' artist:' + '\"' + itemE.artists[0].name + '\"', ['track']).then(response => {\n        console.log(response);\n        response.tracks.items.map(itemC => {\n          console.log(itemC);\n\n          if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")) {\n            const cleanList = [...this.state.cleanTracks, itemC];\n            console.log(\"YES: \" + itemC.name);\n          } else {\n            console.log(\"couldn't add: \" + itemC.name);\n          }\n        });\n      });\n    });\n    console.log(cleanList); // this.setState(state =>{\n    //   const cleanTracks = state.cleanTracks.concat({hey: \"test\"});\n    //   console.log(cleanList)\n    //\n    //   return {\n    //     cleanTracks,\n    //   };\n    // });\n\n    console.log(this.state.cleanTracks);\n  }\n\n  makeClean() {\n    this.findCleanTracks();\n    console.log(this.state.cleanTracks);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-lg btn-success\",\n      onClick: this.makeClean,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, \"Clean Playlist\"));\n  }\n\n}\n\nexport default CleanPlaylist;","map":{"version":3,"sources":["/Users/brianaking/Desktop/Spotify API/my-app/src/components/CleanPlaylist.js"],"names":["React","SpotifyWebApi","spotifyApi","CleanPlaylist","Component","constructor","props","state","userId","user","ownerId","playlistName","name","explicitTracks","cleanTracks","NewPlaylistTracks","makeClean","bind","componentDidMount","console","log","playlistId","data","id","getTracksData","owner","explicitTracksList","cleanTracksList","getPlaylistTracks","then","response","items","map","item","track","explicit","push","setState","findCleanTracks","explicitList","itemE","search","artists","tracks","itemC","includes","cleanList","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      ownerId: '',\n      playlistName: this.props.name,\n      explicitTracks: [],\n      cleanTracks: [],\n      NewPlaylistTracks: []\n    };\n    this.makeClean = this.makeClean.bind(this)\n  }\n\n\n  componentDidMount(){\n    console.log(\"mounted\")\n    var playlistId = this.props.data\n    var ownerId = this.props.id\n    this.getTracksData(ownerId, playlistId)\n  }\n\n  getTracksData(owner, id){\n    var explicitTracksList = []\n    var cleanTracksList = []\n    spotifyApi.getPlaylistTracks(owner, id)\n      .then((response) => {\n        console.log(response)\n\n        response.items.map((item) =>{\n          if(item.track.explicit === true){\n            explicitTracksList.push(item.track)\n          }else{\n            cleanTracksList.push(item.track)\n          }\n        })\n          this.setState({\n            explicitTracks: explicitTracksList,\n            cleanTracks: cleanTracksList\n          })\n          console.log(this.state.explicitTracks)\n          console.log(this.state.cleanTracks)\n      })\n    }\n\n    findCleanTracks(){\n      const explicitList = this.state.explicitTracks;\n      // const cleanList = [];\n      explicitList.map((itemE) =>{\n        console.log(itemE)\n        spotifyApi.search('track:' + '\"' +itemE.name+ '\"'  + ' artist:'+ '\"' +itemE.artists[0].name + '\"',['track'])\n          .then((response) => {\n            console.log(response)\n            response.tracks.items.map((itemC) =>{\n              console.log(itemC)\n              if (itemE.artists[0].name === itemC.artists[0].name && itemE.name === itemC.name && !itemC.explicit || itemC.name.includes(\"Clean\")){\n                const cleanList = [...this.state.cleanTracks, itemC]\n                console.log(\"YES: \" + itemC.name)\n              }else{\n                console.log(\"couldn't add: \" + itemC.name)\n              }\n            })\n          })\n      })\n      console.log(cleanList)\n\n      // this.setState(state =>{\n      //   const cleanTracks = state.cleanTracks.concat({hey: \"test\"});\n      //   console.log(cleanList)\n      //\n      //   return {\n      //     cleanTracks,\n      //   };\n      // });\n      console.log(this.state.cleanTracks)\n\n    }\n\n    makeClean(){\n      this.findCleanTracks();\n      console.log(this.state.cleanTracks)\n    }\n\n  render(){\n\n    return(\n      <div>\n      <button type=\"button\" className=\"btn btn-lg btn-success\" onClick= {this.makeClean}>Clean Playlist</button>\n      </div>\n\n    )\n  }\n}\n\nexport default CleanPlaylist\n"]},"metadata":{},"sourceType":"module"}