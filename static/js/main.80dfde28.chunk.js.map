{"version":3,"sources":["profPic.png","logo.png","components/CleanPlaylist.js","components/Playlists.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","spotifyApi","SpotifyWebApi","CleanPlaylist","props","state","userId","user","playlistName","name","playlistId","data","ownerId","buttonPressed","loadingData","newPlaylistId","revealUnable","explicitTracks","cleanTracks","noCleanVersions","recTracks","timesClicked","unaddCounter","openPlaylist","makeCleanPlaylist","bind","findCleanTrack","getRecommended","unableToAdd","addTrack","owner","id","explicitTracksList","cleanTracksList","getPlaylistTracks","then","response","items","map","item","track","explicit","push","this","getTracksData","window","scrollTo","artist","artists","counter","search","searchResult","tracks","itemC","includes","cleanTrack","setState","itemE","length","trackUri","newId","x","uri","createPlaylist","playlistResult","external_urls","spotify","addTracksToPlaylist","trackId","tracksList","slice","splice","getRecommendations","limit","seed_tracks","recommededResult","itemR","elem","document","getElementById","style","backgroundColor","value","removeTracksFromPlaylist","unavalible","index","key","recommendedTracks","className","type","onClick","src","width","height","frameBorder","allowtransparency","allow","title","href","target","rel","disabled","React","Component","Playlists","playlistIsSelected","event","currentPlaylistId","getAttribute","playlistOwnerId","playlistSelected","currentSelected","playlistList","playlistItems","getUserPlaylists","onRejected","images","url","image","getPlaylistData","selected","showPlaylist","playlist","alt","backButton","class","aria-hidden","App","params","getHashParams","token","access_token","setAccessToken","ReactGA","initialize","pageview","location","pathname","loggedIn","profPic","login","e","hashParams","r","q","hash","substring","exec","decodeURIComponent","getMe","display_name","getUserProfile","text","possible","i","charAt","Math","floor","random","generateRandomString","localStorage","setItem","encodeURIComponent","logo","left","delay","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.80dfde28.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profPic.cc02a310.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.69e3c264.png\";","import React from 'react';\nimport './CleanPlaylist.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass CleanPlaylist extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      userId: this.props.user,\n      playlistName: this.props.name,\n      playlistId: this.props.data,\n      ownerId: '',\n      buttonPressed: false,\n      loadingData: false,\n      newPlaylistId: '',\n      revealUnable: false,\n    };\n\n    this.explicitTracks = [];\n    this.cleanTracks = [];\n    this.noCleanVersions = [];\n    this.recTracks = [];\n    this.timesClicked = 1;\n    this.unaddCounter = 1;\n    this.openPlaylist = \"\";\n    this.makeCleanPlaylist = this.makeCleanPlaylist.bind(this)\n    this.findCleanTrack = this.findCleanTrack.bind(this)\n    this.getRecommended = this.getRecommended.bind(this)\n    this.unableToAdd = this.unableToAdd.bind(this)\n    this.addTrack = this.addTrack.bind(this)\n\n\n\n\n  }\n\n\n  getTracksData(owner, id){\n    var explicitTracksList = []\n    var cleanTracksList = []\n    spotifyApi.getPlaylistTracks(owner, id)\n      .then((response) => {\n\n        response.items.map((item) =>{\n          if(item.track.explicit === true){\n            explicitTracksList.push(item.track)\n          }else{\n            cleanTracksList.push(item.track)\n          }\n        })\n      })\n      this.explicitTracks = explicitTracksList\n      this.cleanTracks = cleanTracksList\n\n\n    }\n\n    componentDidMount(){\n      var playlistId = this.props.data\n      var ownerId = this.props.id\n      this.getTracksData(ownerId, playlistId)\n      window.scrollTo(0, 0)\n    }\n\n    async findCleanTrack(track){\n      var name = track.name\n      var artist = track.artists[0].name\n      var cleanTrack;\n      var itemC;\n      var counter = 0;\n        let searchResult = await spotifyApi.search('track:'+ '\"' +name+ '\"' + ' artist:'+ '\"'+ artist + '\"' ,['track'])\n        for (itemC of searchResult.tracks.items){\n          if (itemC.explicit === false){\n            if((itemC.name === name || itemC.name.includes(\"Clean\")) && (itemC.artists[0].name === artist && counter <= 0) ){\n              cleanTrack = itemC\n              counter ++\n            }\n          }\n        }\n        if (counter === 0 ){\n          cleanTrack = null\n        }\n\n        return cleanTrack\n    }\n\n    async makeCleanPlaylist(){\n\n      this.setState({\n        loadingData: true\n      })\n\n      var itemE;\n      for (itemE of this.explicitTracks) {\n        let cleanTrack = await this.findCleanTrack(itemE)\n        if (cleanTrack === null){\n          this.noCleanVersions.push(itemE)\n        }else{\n          this.cleanTracks.push(cleanTrack)\n        }\n      }\n\n      if (this.noCleanVersions.length > 0){\n        this.recTracks = await this.getRecommended(this.noCleanVersions)\n\n      }\n\n       var trackUri = [];\n       var newId = '';\n       var x;\n       for (x of this.cleanTracks){\n         trackUri.push(x.uri)\n       }\n        let playlistResult = await spotifyApi.createPlaylist(this.state.userId, {name: this.state.playlistName + \"(Clean)\"})\n        this.openPlaylist = playlistResult.external_urls.spotify\n        newId = playlistResult.id\n\n        let addResult = await spotifyApi.addTracksToPlaylist(this.state.userId, newId, trackUri)\n\n        this.setState({\n          newPlaylistId: newId,\n          buttonPressed: true\n        })\n\n    }\n\n    async getRecommended(tracks){\n      var trackId = [];\n      var tracksList = tracks.slice();\n      var recTracks =[];\n\n      if (tracks.length > 5){\n        tracksList.splice(5,tracks.length)\n      }\n\n      tracksList.map((item) => {\n        trackId.push(item.id)\n      })\n\n      let recommededResult = await spotifyApi.getRecommendations({limit: 20, seed_tracks: trackId})\n      var itemR;\n\n        for (itemR of recommededResult.tracks) {\n          if (itemR.explicit === true){\n            let cleanTrack = await this.findCleanTrack(itemR)\n            if (cleanTrack !== null){\n              recTracks.push(cleanTrack)\n            }\n\n          }else{\n            recTracks.push(itemR)\n          }\n        }\n\n        if (recTracks.length > 10){\n          recTracks = recTracks.slice(0,10)\n        }\n\n      return recTracks\n    }\n\n   unableToAdd(){\n     this.timesClicked ++\n     if (this.timesClicked % 2 === 0){\n       this.setState({\n         revealUnable: true\n       })\n     }else{\n       this.setState({\n         revealUnable: false\n       })\n     }\n    }\n\n     async addTrack(track){\n       this.unaddCounter ++\n       var elem = document.getElementById(track.id);\n       var uri = track.uri\n       if (this.unaddCounter % 2 === 0){\n         let addResult = await spotifyApi.addTracksToPlaylist(this.state.userId, this.state.newPlaylistId, [uri])\n         elem.style.backgroundColor = \"green\";\n         elem.value = \"DONE\";\n       }else{\n         let addResult = await spotifyApi.removeTracksFromPlaylist(this.state.userId, this.state.newPlaylistId, [uri])\n         elem.style.backgroundColor = \"#565656\";\n         elem.value = \"ADD\";\n\n       }\n    }\n\n\n  render(){\n\n    const unavalible =\n    this.noCleanVersions.map(function(item, index) {\n      index++\n      return (\n        <p key={item.id}> {index}. {item.name}</p>\n      )\n    });\n\n\n    const recommendedTracks =\n    this.recTracks.map(function(item) {\n      return (\n        <div key= {item.id}>\n        <div className=\"row my-2\">\n          <div className=\"col-3 col-lg-1 mt-3\">\n            <input type=\"button\" className=\"btn btn-add\" id={item.id} value=\"ADD\" onClick={() => this.addTrack(item)}></input>\n          </div>\n          <div className=\"col-9 col-lg-11\">\n            <iframe src= {\"https://open.spotify.com/embed/track/\" + item.id } width=\"90%\" height=\"80\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-track\"></iframe>\n          </div>\n        </div>\n        </div>\n      )\n    }, this);\n\n\n\n\n\n\n\n    return(\n      <div className= \"Clean col-12\">\n\n      {\n        this.state.buttonPressed ?\n        <div className= \"mx-auto\">\n          <h3 className=\"font-weight-bold text-success\"> Your Playlist Is Cleanified! </h3>\n          <p> You're done! We have already saved it to your library!</p>\n            <a href= {this.openPlaylist} target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-success\"> Open In Spotify </a>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div id=\"fadeshow\" className=\"col\">\n              <iframe src= {\"https://open.spotify.com/embed/playlist/\" + this.state.playlistId} width=\"100%\" height=\"290\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-playlist\"></iframe>\n            </div>\n            <i id=\"fadeshow\" className=\"fas fa-arrow-right text-success fa-2x\"></i>\n            <div className=\"col\">\n              <iframe src= {\"https://open.spotify.com/embed/playlist/\" + this.state.newPlaylistId} width=\"100%\" height=\"290\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-playlist\"></iframe>\n            </div>\n          </div>\n        </div>\n          <hr className=\"divider mb-3\"/>\n\n          <div>\n            <button type=\"button\" className=\"btn btn-danger\" onClick={this.unableToAdd}> Reveal Songs Unable to be Cleaned: {this.noCleanVersions.length}</button>\n            {\n              this.state.revealUnable && this.noCleanVersions.length > 0 ?\n                unavalible\n              :\n              this.state.revealUnable &&\n               <p>Good News! We were able to find clean versions of each song!</p>\n            }\n            {\n              this.noCleanVersions.length > 0 &&\n              <div>\n              <hr className=\"divider mt-5\"/>\n              <h2>Recommended Clean Songs</h2>\n              <p>Based on the songs we were unable to add: </p>\n              <div className=\"container\">\n\n                {recommendedTracks}\n              </div>\n              </div>\n            }\n\n\n          </div>\n\n        </div>\n        :\n          <div>\n            <button type=\"button\" className=\"btn btn-lg btn-success mt-5\" onClick= {this.makeCleanPlaylist} disabled={this.state.loadingData}>\n            { this.state.loadingData &&\n              <i className=\"fa fa-compact-disc fa-spin text-white\"></i>\n            }\n            Clean Playlist\n            </button>\n\n            <div>\n              <iframe src= {\"https://open.spotify.com/embed/playlist/\" + this.state.playlistId} width=\"80%\" height=\"400\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\" title=\"embeded-playlist\"></iframe>\n            </div>\n            <p className=\"text-muted\"> Note: Spotify's explicit content tags are applied based on information Spotify receives from rights-holders. They can’t guarantee all explicit content is marked as such. Cleanify will clean your playlist based off of Spotify's marked explicit/clean songs.</p>\n\n          </div>\n      }\n\n      </div>\n    )\n  }\n}\n\nexport default CleanPlaylist\n","import React from 'react';\nimport CleanPlaylist from './CleanPlaylist'\nimport './Playlists.css';\nimport SpotifyWebApi from 'spotify-web-api-js';\nconst spotifyApi = new SpotifyWebApi();\n\nclass Playlists extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      ownerId: '',\n      playlistList: [],\n      playlistSelected: false,\n      currentSelected: '',\n      playlistName: '',\n    };\n  }\n\n  getPlaylistData(){\n    var playlistItems= [];\n\n      spotifyApi.getUserPlaylists({limit:50})\n         .then((response, onRejected) => {\n             response.items.map((item) => {\n               if (item.images.length === 0){\n                 item.images.push({url: \"https://i.ya-webdesign.com/images/notes-grey-icons-png-2.png\"})\n               }\n               playlistItems.push({ownerId: item.owner.id, id: item.id, name:item.name, image: item.images[0].url})\n               return playlistItems\n             })\n            this.setState({\n              playlistList: playlistItems\n            })\n         });\n\n   }\n\n   componentDidMount(){\n     this.getPlaylistData()\n   }\n\n   playlistIsSelected = (event) => {\n\n     var currentPlaylistId = event.target.getAttribute(\"id\")\n     var playlistOwnerId = event.target.getAttribute(\"owner\")\n     var playlistName = event.target.getAttribute(\"name\")\n     this.setState({\n       playlistSelected: true,\n       currentSelected: currentPlaylistId,\n       ownerId: playlistOwnerId,\n       playlistName: playlistName\n     });\n   }\n\n   backButton(){\n     this.setState({\n       playlistSelected:false\n     })\n   }\n\n  render(){\n    const userId = this.props.user\n    const playlistId = this.state.currentSelected\n    const ownerId = this.state.ownerId\n\n    const selected = this.playlistIsSelected\n\n    const showPlaylist =\n      this.state.playlistList.map(function(playlist){\n        return (\n          <div key={playlist.id} className=\"col-sm-6 col-md-4 col-lg-3 col-12 card\">\n             <img src={playlist.image} id= {playlist.id} name= {playlist.name} owner = {playlist.ownerId} onClick={selected} className=\"card-img card-img-top\" alt=\"card\"/>\n             <div className=\"card-body\">\n               <p className=\"card-text font-weight-bold\">{playlist.name}</p>\n             </div>\n          </div>\n           )\n      });\n\n\n\n    return (\n      <div className=\"Playlist\">\n\n      {\n        this.state.playlistSelected ?\n        <div>\n          <div className=\"row\">\n          <div className=\"col\">\n            <button type=\"button\" className=\"btn btn-success float-left mt-n1\" onClick={this.backButton.bind(this)}><i class=\"fa fa-arrow-circle-left\" aria-hidden=\"true\"></i> Clean Another</button>\n          </div>\n          </div>\n          <div className=\"row\">\n            <CleanPlaylist name= {this.state.playlistName} id= {ownerId} data= {playlistId} user= {userId}></CleanPlaylist>\n          </div>\n        </div>\n        : <div className=\"user-playlists overflow-hidden\">\n            <h3 className=\"font-weight-bold header\">Playlists</h3>\n            <h3 className=\"h5 text-weight-bold text-success sub-header \"> Select a Playlist to Clean</h3>\n            <p className=\" text-muted sub-sub-header\"> Don't worry! We will not alter your original playlist.</p>\n            <p className=\" text-muted sub-sub-header\"> Can't find it? Make sure you either own or follow the playlist. If so, open Spotify and move it to the top of your list!</p>\n            <hr className=\"divider mb-5\"/>\n              <div className=\"row\">\n                {showPlaylist}\n              </div>\n          </div>\n      }\n      </div>\n\n    );\n  }\n}\n\n\nexport default Playlists\n","import React, {Component} from 'react';\nimport profPic from './profPic.png';\nimport logo from './logo.png'\nimport Zoom from 'react-reveal/Zoom';\nimport Bounce from 'react-reveal/Bounce';\n\nimport './App.css';\nimport Playlists from './components/Playlists'\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport ReactGA from 'react-ga';\n\n\nconst spotifyApi = new SpotifyWebApi();\n\n\nclass App extends Component {\n\nconstructor (){\n  super();\n  const params = this.getHashParams();\n  const token = params.access_token;\n\n  if (token) {\n     spotifyApi.setAccessToken(token);\n  }\n\n    ReactGA.initialize('UA-172518785-1');\n    ReactGA.pageview(window.location.pathname);\n\n  this.state ={\n    userId: '',\n    loggedIn: params.access_token ? true : false,\n    profPic: '',\n    name: ''\n  }\n\n  this.login = this.login.bind(this)\n}\n\n\n getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n\n  getUserProfile(){\n    spotifyApi.getMe()\n      .then((response) => {\n        if ((response.images.length === 0)){\n          this.setState ({\n            userId: response.id,\n            profPic: profPic,\n            name: response.display_name\n          })\n        }else{\n          this.setState ({\n            userId: response.id,\n            profPic: response.images[0].url,\n            name: response.display_name\n          })\n        }\n      })\n  }\n\n  componentDidMount(){\n\n    if(this.state.loggedIn){\n      this.getUserProfile()\n    }\n  }\n\n\n generateRandomString(length) {\n    var text = '';\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (var i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  };\n\n  login() {\n    var stateKey = 'spotify_auth_state';\n\n    var client_id = '69862027b9b54d9eb6f6dd2ae3ed3050'; // Your client id\n    var redirect_uri = 'https://briiking4.github.io/cleanify/'; // Your redirect uri\n\n    var state = this.generateRandomString(16);\n\n    localStorage.setItem(stateKey, state);\n    var scope = 'user-read-private user-read-email playlist-read-private playlist-modify-public playlist-modify-private';\n\n    var url = 'https://accounts.spotify.com/authorize';\n    url += '?response_type=token';\n    url += '&client_id=' + encodeURIComponent(client_id);\n    url += '&scope=' + encodeURIComponent(scope);\n    url += '&redirect_uri=' + encodeURIComponent(redirect_uri);\n    url += '&state=' + encodeURIComponent(state);\n\n    window.location = url;\n  };\n\n\n\n  render(){\n    const userId = this.state.userId\n\n\n    return (\n\n      <div className=\"App\">\n\n        {\n          this.state.loggedIn ?\n           <div>\n              <div className=\"row profile\">\n                <div className=\"col-4 col-sm-4 col-lg-2 col-md-3\">\n                  <img src= {this.state.profPic} className=\"profPic rounded-circle img-fluid\" alt=\"profile pic\"/>\n                </div>\n                <div className=\"col-8 col-sm-8 col-lg-10 col-md-9 text-left ml-n3\">\n                  <h1 className=\"profName\" >{this.state.name}</h1>\n                </div>\n              </div>\n              <Playlists user= {userId}></Playlists>\n            </div>\n          :\n          <div id=\"login\" className=\"pt-5\">\n          <Zoom>\n          <div>\n              <img src={logo} class=\"logo img-fluid text-center\" alt=\"logo\"/>\n              <h1 className=\"logo-title\">Cleanify</h1>\n          </div>\n          </Zoom>\n          <Bounce left delay={1000}>\n            <div>\n            <button id=\"login-button\" onClick={this.login} class=\"btn btn-success btn-lg\">Log in with Spotify</button>\n            </div>\n          </Bounce>\n          </div>\n\n        }\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}